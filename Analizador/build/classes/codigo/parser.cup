package codigo;
import java_cup.runtime.*;

parser code {:
    public void syntax_error(Symbol s) {
        System.err.println("ERROR: Token inesperado en linea " + (s.left+1));
    }
    
    public void report_error(String message, Object info) {
        System.err.println("ERROR: " + message);
    }
:};

// TERMINALES
terminal String left_parenthesis;
terminal String right_parenthesis;
terminal String wall_comment;
terminal String left_exclamation;
terminal String right_exclamation;
terminal String left_block;
terminal String right_block;

terminal String plus_operator;
terminal String minus_operator;
terminal String multiplication_operator;
terminal String division_operator;
terminal String int_division_operator;
terminal String modulo_operator;
terminal String power_operator;
terminal String increment_operator;
terminal String decrement_operator;
terminal String assignment_operator;

terminal String digit1to9_literal;
terminal String decimal_digit_literal;
terminal String zero_literal;
terminal String dot_literal;
terminal String letter_or_underscore;
terminal String identifier_char;

terminal String int_keyword;
terminal String float_keyword;
terminal String bool_keyword;
terminal String char_keyword;
terminal String string_keyword;
terminal String void_keyword;
terminal String principal_keyword;
terminal String let_keyword;
terminal String input_keyword;
terminal String output_keyword;
terminal String comma_keyword;
terminal String loop_keyword;
terminal String exit_when_keyword;
terminal String end_loop_$_keyword;
terminal String for_keyword;
terminal String step_keyword;
terminal String to_keyword;
terminal String downto_keyword;
terminal String do_keyword;
terminal String return_keyword;
terminal String break_keyword;
terminal String greater_operator;
terminal String less_operator;
terminal String greater_equal_operator;
terminal String less_equal_operator;
terminal String equal_operator;
terminal String not_equal_operator;
terminal String delimiter;
terminal String line_break;
terminal String or_operator;
terminal String and_operator;
terminal String not_operator;
terminal String decide_of_keyword;
terminal String elseif_keyword;
terminal String else_keyword;
terminal String single_quote;
terminal String double_quote;
terminal String int_literal;
terminal String float_literal;
terminal String bool_literal;
terminal String char_literal;
terminal String string_literal;
terminal String identifier;
terminal String true_keyword;
terminal String false_keyword;

// NO TERMINALES
non terminal type;
non terminal literal;
// Expresiones aritméticas
non terminal unary_negative;
non terminal number_literal;
non terminal postfix_expression;
non terminal postfix_expressionA;
non terminal arithmetic_expression;
non terminal term;
non terminal termA;
non terminal power;
non terminal factor;
non terminal arithmetic_operands;

// Expresiones lógicas y relacionales
non terminal logical_expresion;
non terminal logical_expresion_or;
non terminal logical_expresion_and;
non terminal logical_expresion_operands;
non terminal logical_factor;
non terminal relational_expression;
non terminal relational_operator_numeric;
non terminal relational_operator;
non terminal equality_expression;
non terminal equality_operand;
non terminal equality_operator;
non terminal logical_operator;
non terminal conditionR;
non terminal equality_condition;
non terminal relational_condition;
non terminal simple_condition;
non terminal multiple_condition;
non terminal not_condition;

// Declaraciones y sentencias
non terminal declaration_values;
non terminal declaration;
non terminal reassignment;
non terminal array_declaration;
non terminal assign_elements_array;
non terminal array_access;
non terminal statement;
non terminal statements;
non terminal block;

// Funciones input y output
non terminal input_statement;
non terminal output_statement;

// Bucles y condicionales
non terminal loop;
non terminal for_loop;
non terminal break_statement;
non terminal decide_of;
non terminal else_if;
non terminal else_part;


non terminal array_element;        // de un elemento
non terminal array_elements_list;  // de una lista de elementos SON DE PRUEBA AMBOS 

non terminal else_if_list; //PRUEBA
non terminal loop_body; // PRUEBA
non terminal arg;   // PRUEBA


// Funciones
non terminal function;
non terminal functions;
non terminal params;
non terminal param;
non terminal return_statement;
non terminal function_call;
non terminal args;

// Programa principal
non terminal principal;
non terminal global_variables;
non terminal program;

// los nuevos
non terminal equality_conditionA;
non terminal relational_conditionA;
non terminal blockA;
non terminal paramsA;
non terminal argsA;
non terminal global_variablesA;

// Por úlitmo un orden precendencia para el cup
precedence left or_operator; // ~
precedence left and_operator; // @
precedence right not_operator; // Σ
precedence nonassoc equal_operator, not_equal_operator; //==, !=
precedence nonassoc greater_operator, less_operator, greater_equal_operator, less_equal_operator; // >, <, >=, <=
precedence left plus_operator, minus_operator; // +, -
precedence left multiplication_operator, division_operator, int_division_operator, modulo_operator; // *, /, //, %
precedence right power_operator; // ^
precedence right increment_operator, decrement_operator; // ++, --
//ESTOS LOS PODEMOS REVISAR PARA VER SI LOS UNARIOS TAMBIÉN VAN



// El start siempre después de los terminales y no terminales
start with program;


//Expresiones aritméticas
unary_negative ::= minus_operator int_literal
                |  minus_operator float_literal
                ;

postfix_expression ::= identifier increment_operator
                    |  identifier decrement_operator
                    ;

arithmetic_expression ::= arithmetic_expression plus_operator term
                       |  arithmetic_expression minus_operator term
                       |  term
                       ;

term ::= term multiplication_operator power
      |  term division_operator power
      |  term int_division_operator power
      |  term modulo_operator power
      |  power
      ;

power ::= factor power_operator power
       |  factor
       ;

factor ::= left_parenthesis arithmetic_expression right_parenthesis
        |  arithmetic_operands
        ;

arithmetic_operands ::= int_literal
                     |  float_literal
                     |  identifier
                     |  unary_negative
                     |  postfix_expression
                     |  array_access
                     |  function_call
                     ;

// Expresiones logicas and, or y negación
logical_expresion ::= logical_expresion_or;

logical_expresion_or ::= logical_expresion_or or_operator logical_expresion_and
            |  logical_expresion_and
            ;

logical_expresion_and ::= logical_expresion_and and_operator logical_expresion_operands
             |  logical_expresion_operands
             ;

logical_expresion_operands ::= not_operator logical_factor
                |  relational_expression
                |  bool_literal
                |  left_parenthesis logical_expresion right_parenthesis
                ;

//Expresiones relacionales
relational_expression ::= arithmetic_expression greater_operator arithmetic_expression
            |  arithmetic_expression less_operator arithmetic_expression
            |  arithmetic_expression greater_equal_operator arithmetic_expression
            |  arithmetic_expression less_equal_operator arithmetic_expression
            |  arithmetic_expression equal_operator arithmetic_expression
            |  arithmetic_expression not_equal_operator arithmetic_expression
            ;

//Declaraciones
declaration_values ::= arithmetic_expression | logical_expresion;

declaration ::= let_keyword int_keyword identifier delimiter
             |  let_keyword float_keyword identifier delimiter
             |  let_keyword bool_keyword identifier delimiter
             |  let_keyword char_keyword identifier delimiter
             |  let_keyword string_keyword identifier delimiter
             |  let_keyword int_keyword identifier assignment_operator declaration_values delimiter
             |  let_keyword float_keyword identifier assignment_operator declaration_values delimiter
             |  let_keyword bool_keyword identifier assignment_operator declaration_values delimiter
             |  let_keyword char_keyword identifier assignment_operator declaration_values delimiter
             |  let_keyword string_keyword identifier assignment_operator declaration_values delimiter
             ;


//Reasignación
reassignment ::= identifier assignment_operator declaration_values delimiter;

program ::= declaration | reassignment;