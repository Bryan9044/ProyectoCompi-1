
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\011\003\000\002\012\005\000\002\012" +
    "\003\000\002\013\005\000\002\013\003\000\002\014\004" +
    "\000\002\014\003\000\002\014\003\000\002\014\005\000" +
    "\002\014\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\010\000\002\020\010\000\002\020\010\000\002\020" +
    "\010\000\002\020\010\000\002\020\004\000\002\021\006" +
    "\000\002\021\006\000\002\022\011\000\002\022\007\000" +
    "\002\022\011\000\002\022\007\000\002\022\015\000\002" +
    "\022\015\000\002\022\015\000\002\022\015\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\023\011\000" +
    "\002\023\011\000\002\024\006\000\002\030\005\000\002" +
    "\030\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\036\007\000\002\036\010\000" +
    "\002\036\010\000\002\036\011\000\002\036\007\000\002" +
    "\037\003\000\002\037\004\000\002\040\007\000\002\041" +
    "\004\000\002\032\010\000\002\032\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\004\000\002\034\004\000" +
    "\002\035\004\000\002\033\014\000\002\033\014\000\002" +
    "\033\014\000\002\033\014\000\002\033\010\000\002\043" +
    "\007\000\002\043\010\000\002\043\010\000\002\043\007" +
    "\000\002\043\010\000\002\043\010\000\002\043\007\000" +
    "\002\043\010\000\002\043\010\000\002\043\007\000\002" +
    "\043\010\000\002\043\010\000\002\043\007\000\002\043" +
    "\010\000\002\043\010\000\002\045\004\000\002\047\002" +
    "\000\002\047\005\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\050\004\000\002\050\005\000\002\050\005\000\002\051" +
    "\005\000\002\051\006\000\002\052\004\000\002\052\004" +
    "\000\002\052\004\000\002\052\004\000\002\053\002\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\027\005\000\002\027\004\000\002\027" +
    "\005\000\002\026\003\000\002\026\004\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\055" +
    "\002\000\002\055\004\000\002\054\007\000\002\044\002" +
    "\000\002\044\004\000\002\056\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0173\000\010\003\uff63\027\uff63\031\uff63\001\002\000" +
    "\010\003\007\027\010\031\013\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\055\275\001" +
    "\002\000\004\030\u0172\001\002\000\016\002\uff60\022\uff60" +
    "\023\uff60\024\uff60\025\uff60\026\uff60\001\002\000\010\003" +
    "\uff62\027\uff62\031\uff62\001\002\000\014\022\020\023\014" +
    "\024\017\025\016\026\015\001\002\000\004\071\202\001" +
    "\002\000\004\071\175\001\002\000\004\071\170\001\002" +
    "\000\004\071\163\001\002\000\004\071\021\001\002\000" +
    "\006\021\022\055\023\001\002\000\024\004\050\011\027" +
    "\060\045\064\047\065\024\066\046\067\043\070\035\071" +
    "\025\001\002\000\036\003\uffd3\007\uffd3\027\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\045" +
    "\uffd3\046\uffd3\061\uffd3\071\uffd3\001\002\000\044\005\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\001\002\000\054\004\131\005" +
    "\uffec\006\132\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\133\020\134\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\001\002\000\044\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\001" +
    "\002\000\006\064\130\065\127\001\002\000\044\005\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\001\002\000\044\005\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\001\002\000\042\005\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\001\002\000\010\005\uffe7\055\uffe7\056\125\001" +
    "\002\000\044\005\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\001\002" +
    "\000\004\055\uffd4\001\002\000\044\005\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\123\047\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\001\002\000\024\010\057\011\066\047\064" +
    "\050\061\051\062\052\063\053\060\054\065\055\uffd7\001" +
    "\002\000\012\005\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002" +
    "\000\042\005\ufff8\010\ufff8\011\ufff8\012\076\013\075\014" +
    "\074\015\077\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002\000\004\055" +
    "\122\001\002\000\004\055\uffd5\001\002\000\012\005\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\001\002\000\002\001\002\000" +
    "\012\005\uffe0\055\uffe0\056\uffe0\057\uffe0\001\002\000\044" +
    "\005\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\001\002\000\022\003" +
    "\115\004\050\011\027\060\045\064\047\065\024\066\046" +
    "\071\025\001\002\000\044\005\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\001\002\000\004\055\uffd6\001\002\000\012\005\uffe5" +
    "\055\uffe5\056\uffe5\057\054\001\002\000\020\004\050\011" +
    "\027\060\045\064\047\065\024\066\046\071\025\001\002" +
    "\000\022\010\057\011\066\047\064\050\061\051\062\052" +
    "\063\053\060\054\065\001\002\000\012\005\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\001\002\000\016\003\113\004\070\011" +
    "\027\064\047\065\024\071\025\001\002\000\014\004\070" +
    "\011\027\064\047\065\024\071\025\001\002\000\014\004" +
    "\070\011\027\064\047\065\024\071\025\001\002\000\014" +
    "\004\070\011\027\064\047\065\024\071\025\001\002\000" +
    "\014\004\070\011\027\064\047\065\024\071\025\001\002" +
    "\000\014\004\070\011\027\064\047\065\024\071\025\001" +
    "\002\000\014\004\070\011\027\064\047\065\024\071\025" +
    "\001\002\000\016\003\071\004\070\011\027\064\047\065" +
    "\024\071\025\001\002\000\042\005\ufffa\010\ufffa\011\ufffa" +
    "\012\076\013\075\014\074\015\077\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\001\002\000\014\004\070\011\027\064\047\065\024\071" +
    "\025\001\002\000\032\005\ufff9\010\ufff9\011\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\001\002\000\010\005\073\010\057\011\066" +
    "\001\002\000\044\005\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\001" +
    "\002\000\014\004\070\011\027\064\047\065\024\071\025" +
    "\001\002\000\014\004\070\011\027\064\047\065\024\071" +
    "\025\001\002\000\014\004\070\011\027\064\047\065\024" +
    "\071\025\001\002\000\014\004\070\011\027\064\047\065" +
    "\024\071\025\001\002\000\042\005\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\001\002\000\042\005\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000" +
    "\042\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002\000\042\005\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\001\002\000\016\005\uffd8\010\057\011" +
    "\066\055\uffd8\056\uffd8\057\uffd8\001\002\000\016\005\uffdd" +
    "\010\057\011\066\055\uffdd\056\uffdd\057\uffdd\001\002\000" +
    "\016\005\uffda\010\057\011\066\055\uffda\056\uffda\057\uffda" +
    "\001\002\000\016\005\uffdb\010\057\011\066\055\uffdb\056" +
    "\uffdb\057\uffdb\001\002\000\016\005\uffdc\010\057\011\066" +
    "\055\uffdc\056\uffdc\057\uffdc\001\002\000\016\005\uffd9\010" +
    "\057\011\066\055\uffd9\056\uffd9\057\uffd9\001\002\000\042" +
    "\005\ufffc\010\ufffc\011\ufffc\012\076\013\075\014\074\015" +
    "\077\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\001\002\000\032\005\ufffb\010" +
    "\ufffb\011\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\001\002\000\024\005" +
    "\073\010\057\011\066\047\064\050\061\051\062\052\063" +
    "\053\060\054\065\001\002\000\004\005\120\001\002\000" +
    "\004\005\117\001\002\000\012\005\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\001\002\000\012\005\uffde\055\uffde\056\uffde\057" +
    "\uffde\001\002\000\012\005\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\001\002\000\036\003\uffce\007\uffce\027\uffce\031\uffce\032" +
    "\uffce\033\uffce\035\uffce\036\uffce\040\uffce\041\uffce\045\uffce" +
    "\046\uffce\061\uffce\071\uffce\001\002\000\014\004\070\011" +
    "\027\064\047\065\024\071\025\001\002\000\042\005\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\047" +
    "\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\001\002\000\020\004\050\011\027\060" +
    "\045\064\047\065\024\066\046\071\025\001\002\000\012" +
    "\005\uffe6\055\uffe6\056\uffe6\057\054\001\002\000\044\005" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\016\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\056\uffff\057\uffff\001\002\000\044\005\000" +
    "\010\000\011\000\012\000\013\000\014\000\015\000\016" +
    "\000\047\000\050\000\051\000\052\000\053\000\054\000" +
    "\055\000\056\000\057\000\001\002\000\012\005\143\064" +
    "\144\065\141\071\137\001\002\000\004\064\135\001\002" +
    "\000\044\005\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\001\002\000" +
    "\044\005\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001\002\000\004" +
    "\007\136\001\002\000\046\005\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\034\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\001\002\000\010\005\uff77\006\132\034\145" +
    "\001\002\000\004\005\161\001\002\000\006\005\uff77\034" +
    "\145\001\002\000\006\005\uff77\034\145\001\002\000\044" +
    "\005\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015" +
    "\uff7d\016\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\054\uff7d\055\uff7d\056\uff7d\057\uff7d\001\002\000\006\005" +
    "\uff77\034\145\001\002\000\010\064\152\065\150\071\147" +
    "\001\002\000\004\005\uff7b\001\002\000\010\005\uff77\006" +
    "\132\034\145\001\002\000\006\005\uff77\034\145\001\002" +
    "\000\006\005\uff77\034\145\001\002\000\006\005\uff77\034" +
    "\145\001\002\000\004\005\uff76\001\002\000\004\005\uff73" +
    "\001\002\000\004\005\uff75\001\002\000\004\005\uff74\001" +
    "\002\000\004\005\uff78\001\002\000\004\005\uff7a\001\002" +
    "\000\044\005\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c" +
    "\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\001\002\000" +
    "\004\005\uff79\001\002\000\006\021\164\055\165\001\002" +
    "\000\024\004\050\011\027\060\045\064\047\065\024\066" +
    "\046\067\043\070\035\071\025\001\002\000\036\003\uffd1" +
    "\007\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036" +
    "\uffd1\040\uffd1\041\uffd1\045\uffd1\046\uffd1\061\uffd1\071\uffd1" +
    "\001\002\000\004\055\167\001\002\000\036\003\uffcc\007" +
    "\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\036\uffcc" +
    "\040\uffcc\041\uffcc\045\uffcc\046\uffcc\061\uffcc\071\uffcc\001" +
    "\002\000\006\021\171\055\172\001\002\000\024\004\050" +
    "\011\027\060\045\064\047\065\024\066\046\067\043\070" +
    "\035\071\025\001\002\000\036\003\uffd0\007\uffd0\027\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\040\uffd0\041" +
    "\uffd0\045\uffd0\046\uffd0\061\uffd0\071\uffd0\001\002\000\004" +
    "\055\174\001\002\000\036\003\uffcb\007\uffcb\027\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\040\uffcb\041\uffcb" +
    "\045\uffcb\046\uffcb\061\uffcb\071\uffcb\001\002\000\006\021" +
    "\176\055\177\001\002\000\024\004\050\011\027\060\045" +
    "\064\047\065\024\066\046\067\043\070\035\071\025\001" +
    "\002\000\036\003\uffcf\007\uffcf\027\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\045\uffcf\046" +
    "\uffcf\061\uffcf\071\uffcf\001\002\000\004\055\201\001\002" +
    "\000\036\003\uffca\007\uffca\027\uffca\031\uffca\032\uffca\033" +
    "\uffca\035\uffca\036\uffca\040\uffca\041\uffca\045\uffca\046\uffca" +
    "\061\uffca\071\uffca\001\002\000\006\021\203\055\204\001" +
    "\002\000\024\004\050\011\027\060\045\064\047\065\024" +
    "\066\046\067\043\070\035\071\025\001\002\000\036\003" +
    "\uffd2\007\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2" +
    "\036\uffd2\040\uffd2\041\uffd2\045\uffd2\046\uffd2\061\uffd2\071" +
    "\uffd2\001\002\000\004\055\206\001\002\000\036\003\uffcd" +
    "\007\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036" +
    "\uffcd\040\uffcd\041\uffcd\045\uffcd\046\uffcd\061\uffcd\071\uffcd" +
    "\001\002\000\016\002\uff5e\022\214\023\212\024\215\025" +
    "\213\026\211\001\002\000\016\002\uff5f\022\uff5f\023\uff5f" +
    "\024\uff5f\025\uff5f\026\uff5f\001\002\000\004\071\u0168\001" +
    "\002\000\004\071\u015e\001\002\000\004\071\u0154\001\002" +
    "\000\004\071\u014a\001\002\000\004\071\216\001\002\000" +
    "\004\004\217\001\002\000\020\003\230\005\225\022\227" +
    "\023\222\024\226\025\220\026\221\001\002\000\004\071" +
    "\u0149\001\002\000\004\071\u0148\001\002\000\004\071\u0147" +
    "\001\002\000\006\005\uff87\034\u0143\001\002\000\004\005" +
    "\u0141\001\002\000\004\006\232\001\002\000\004\071\u013f" +
    "\001\002\000\004\071\u013e\001\002\000\004\005\231\001" +
    "\002\000\004\006\232\001\002\000\026\003\247\007\240" +
    "\031\244\032\242\033\252\035\260\040\246\045\241\061" +
    "\250\071\237\001\002\000\016\002\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\001\002\000\032\003\uff6d\007" +
    "\uff6d\031\uff6d\032\uff6d\033\uff6d\035\uff6d\036\uff6d\040\uff6d" +
    "\045\uff6d\046\uff6d\061\uff6d\071\uff6d\001\002\000\026\003" +
    "\uff6f\007\uff6f\031\uff6f\032\uff6f\033\uff6f\035\uff6f\040\uff6f" +
    "\045\uff6f\061\uff6f\071\uff6f\001\002\000\032\003\uff6a\007" +
    "\uff6a\031\uff6a\032\uff6a\033\uff6a\035\uff6a\036\uff6a\040\uff6a" +
    "\045\uff6a\046\uff6a\061\uff6a\071\uff6a\001\002\000\006\006" +
    "\u0132\021\u0131\001\002\000\052\002\uff71\003\uff71\007\uff71" +
    "\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\031\uff71\032" +
    "\uff71\033\uff71\035\uff71\036\uff71\040\uff71\045\uff71\046\uff71" +
    "\061\uff71\062\uff71\063\uff71\071\uff71\001\002\000\022\004" +
    "\050\011\027\055\u012e\060\045\064\047\065\024\066\046" +
    "\071\025\001\002\000\006\003\u0128\071\u0129\001\002\000" +
    "\032\003\uff68\007\uff68\031\uff68\032\uff68\033\uff68\035\uff68" +
    "\036\uff68\040\uff68\045\uff68\046\uff68\061\uff68\071\uff68\001" +
    "\002\000\014\022\u0102\023\014\024\017\025\u0101\026\015" +
    "\001\002\000\032\003\uff6c\007\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\035\uff6c\036\uff6c\040\uff6c\045\uff6c\046\uff6c\061\uff6c" +
    "\071\uff6c\001\002\000\004\004\344\001\002\000\006\007" +
    "\343\055\275\001\002\000\004\004\320\001\002\000\032" +
    "\003\uff65\007\uff65\031\uff65\032\uff65\033\uff65\035\uff65\036" +
    "\uff65\040\uff65\045\uff65\046\uff65\061\uff65\071\uff65\001\002" +
    "\000\020\003\304\064\310\065\306\066\302\067\305\070" +
    "\307\071\303\001\002\000\032\003\uff6b\007\uff6b\031\uff6b" +
    "\032\uff6b\033\uff6b\035\uff6b\036\uff6b\040\uff6b\045\uff6b\046" +
    "\uff6b\061\uff6b\071\uff6b\001\002\000\026\003\007\007\301" +
    "\031\244\032\242\033\252\035\260\040\246\045\241\061" +
    "\250\071\237\001\002\000\032\003\uff67\007\uff67\031\uff67" +
    "\032\uff67\033\uff67\035\uff67\036\uff67\040\uff67\045\uff67\046" +
    "\uff67\061\uff67\071\uff67\001\002\000\032\003\uff66\007\uff66" +
    "\031\uff66\032\uff66\033\uff66\035\uff66\036\uff66\040\uff66\045" +
    "\uff66\046\uff66\061\uff66\071\uff66\001\002\000\032\003\uff64" +
    "\007\uff64\031\uff64\032\uff64\033\uff64\035\uff64\036\uff64\040" +
    "\uff64\045\uff64\046\uff64\061\uff64\071\uff64\001\002\000\026" +
    "\003\265\031\244\032\242\033\252\035\260\040\246\045" +
    "\241\046\263\061\250\071\237\001\002\000\032\003\uff69" +
    "\007\uff69\031\uff69\032\uff69\033\uff69\035\uff69\036\uff69\040" +
    "\uff69\045\uff69\046\uff69\061\uff69\071\uff69\001\002\000\030" +
    "\003\uffa1\031\uffa1\032\uffa1\033\uffa1\035\uffa1\036\uffa1\040" +
    "\uffa1\045\uffa1\046\uffa1\061\uffa1\071\uffa1\001\002\000\004" +
    "\055\277\001\002\000\030\003\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\035\uffa0\036\uffa0\040\uffa0\045\uffa0\046\uffa0\061\uffa0" +
    "\071\uffa0\001\002\000\006\037\276\055\275\001\002\000" +
    "\030\003\007\031\244\032\242\033\252\035\260\036\270" +
    "\040\246\045\241\046\263\061\250\071\237\001\002\000" +
    "\030\003\uff9f\031\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f" +
    "\040\uff9f\045\uff9f\046\uff9f\061\uff9f\071\uff9f\001\002\000" +
    "\020\004\050\011\027\060\045\064\047\065\024\066\046" +
    "\071\025\001\002\000\030\003\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\035\uff9e\036\uff9e\040\uff9e\045\uff9e\046\uff9e\061\uff9e" +
    "\071\uff9e\001\002\000\004\055\273\001\002\000\004\037" +
    "\274\001\002\000\032\003\uffa3\007\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\035\uffa3\036\uffa3\040\uffa3\045\uffa3\046\uffa3\061" +
    "\uffa3\071\uffa3\001\002\000\036\003\uffc9\007\uffc9\027\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\040\uffc9\041" +
    "\uffc9\045\uffc9\046\uffc9\061\uffc9\071\uffc9\001\002\000\032" +
    "\003\uffa2\007\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2\036" +
    "\uffa2\040\uffa2\045\uffa2\046\uffa2\061\uffa2\071\uffa2\001\002" +
    "\000\030\003\uff9d\031\uff9d\032\uff9d\033\uff9d\035\uff9d\036" +
    "\uff9d\040\uff9d\045\uff9d\046\uff9d\061\uff9d\071\uff9d\001\002" +
    "\000\026\003\uff6e\007\uff6e\031\uff6e\032\uff6e\033\uff6e\035" +
    "\uff6e\040\uff6e\045\uff6e\061\uff6e\071\uff6e\001\002\000\052" +
    "\002\uff72\003\uff72\007\uff72\022\uff72\023\uff72\024\uff72\025" +
    "\uff72\026\uff72\031\uff72\032\uff72\033\uff72\035\uff72\036\uff72" +
    "\040\uff72\045\uff72\046\uff72\061\uff72\062\uff72\063\uff72\071" +
    "\uff72\001\002\000\004\055\317\001\002\000\004\055\316" +
    "\001\002\000\004\055\315\001\002\000\004\055\314\001" +
    "\002\000\004\055\313\001\002\000\004\055\312\001\002" +
    "\000\004\055\311\001\002\000\032\003\uffb2\007\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\040\uffb2\045\uffb2" +
    "\046\uffb2\061\uffb2\071\uffb2\001\002\000\032\003\uffae\007" +
    "\uffae\031\uffae\032\uffae\033\uffae\035\uffae\036\uffae\040\uffae" +
    "\045\uffae\046\uffae\061\uffae\071\uffae\001\002\000\032\003" +
    "\uffb1\007\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1" +
    "\040\uffb1\045\uffb1\046\uffb1\061\uffb1\071\uffb1\001\002\000" +
    "\032\003\uffaf\007\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf" +
    "\036\uffaf\040\uffaf\045\uffaf\046\uffaf\061\uffaf\071\uffaf\001" +
    "\002\000\032\003\uffad\007\uffad\031\uffad\032\uffad\033\uffad" +
    "\035\uffad\036\uffad\040\uffad\045\uffad\046\uffad\061\uffad\071" +
    "\uffad\001\002\000\032\003\uffb3\007\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\035\uffb3\036\uffb3\040\uffb3\045\uffb3\046\uffb3\061" +
    "\uffb3\071\uffb3\001\002\000\032\003\uffb0\007\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\035\uffb0\036\uffb0\040\uffb0\045\uffb0\046" +
    "\uffb0\061\uffb0\071\uffb0\001\002\000\022\003\321\004\050" +
    "\011\027\060\045\064\047\065\024\066\046\071\025\001" +
    "\002\000\004\005\341\001\002\000\004\005\323\001\002" +
    "\000\004\006\232\001\002\000\036\003\uffac\007\uffac\031" +
    "\uffac\032\uffac\033\uffac\035\uffac\036\uffac\040\uffac\045\uffac" +
    "\046\uffac\061\uffac\062\331\063\330\071\uffac\001\002\000" +
    "\036\003\uffa7\007\uffa7\031\uffa7\032\uffa7\033\uffa7\035\uffa7" +
    "\036\uffa7\040\uffa7\045\uffa7\046\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\071\uffa7\001\002\000\036\003\uffab\007\uffab\031\uffab" +
    "\032\uffab\033\uffab\035\uffab\036\uffab\040\uffab\045\uffab\046" +
    "\uffab\061\uffab\062\331\063\330\071\uffab\001\002\000\032" +
    "\003\uffaa\007\uffaa\031\uffaa\032\uffaa\033\uffaa\035\uffaa\036" +
    "\uffaa\040\uffaa\045\uffaa\046\uffaa\061\uffaa\071\uffaa\001\002" +
    "\000\004\006\232\001\002\000\004\004\332\001\002\000" +
    "\020\004\050\011\027\060\045\064\047\065\024\066\046" +
    "\071\025\001\002\000\004\005\334\001\002\000\004\006" +
    "\232\001\002\000\036\003\uffa5\007\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\035\uffa5\036\uffa5\040\uffa5\045\uffa5\046\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\071\uffa5\001\002\000\032\003\uffa4" +
    "\007\uffa4\031\uffa4\032\uffa4\033\uffa4\035\uffa4\036\uffa4\040" +
    "\uffa4\045\uffa4\046\uffa4\061\uffa4\071\uffa4\001\002\000\036" +
    "\003\uffa6\007\uffa6\031\uffa6\032\uffa6\033\uffa6\035\uffa6\036" +
    "\uffa6\040\uffa6\045\uffa6\046\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\071\uffa6\001\002\000\032\003\uffa9\007\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\035\uffa9\036\uffa9\040\uffa9\045\uffa9\046\uffa9" +
    "\061\uffa9\071\uffa9\001\002\000\004\006\232\001\002\000" +
    "\032\003\uffa8\007\uffa8\031\uffa8\032\uffa8\033\uffa8\035\uffa8" +
    "\036\uffa8\040\uffa8\045\uffa8\046\uffa8\061\uffa8\071\uffa8\001" +
    "\002\000\052\002\uff70\003\uff70\007\uff70\022\uff70\023\uff70" +
    "\024\uff70\025\uff70\026\uff70\031\uff70\032\uff70\033\uff70\035" +
    "\uff70\036\uff70\040\uff70\045\uff70\046\uff70\061\uff70\062\uff70" +
    "\063\uff70\071\uff70\001\002\000\006\003\345\031\013\001" +
    "\002\000\006\005\376\055\275\001\002\000\004\041\347" +
    "\001\002\000\006\064\351\065\350\001\002\000\006\042" +
    "\365\043\364\001\002\000\006\042\353\043\352\001\002" +
    "\000\004\064\360\001\002\000\004\064\354\001\002\000" +
    "\004\005\355\001\002\000\004\044\356\001\002\000\004" +
    "\006\232\001\002\000\032\003\uff9c\007\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\035\uff9c\036\uff9c\040\uff9c\045\uff9c\046\uff9c" +
    "\061\uff9c\071\uff9c\001\002\000\004\005\361\001\002\000" +
    "\004\044\362\001\002\000\004\006\232\001\002\000\032" +
    "\003\uff9b\007\uff9b\031\uff9b\032\uff9b\033\uff9b\035\uff9b\036" +
    "\uff9b\040\uff9b\045\uff9b\046\uff9b\061\uff9b\071\uff9b\001\002" +
    "\000\004\065\372\001\002\000\004\065\366\001\002\000" +
    "\004\005\367\001\002\000\004\044\370\001\002\000\004" +
    "\006\232\001\002\000\032\003\uff9a\007\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\035\uff9a\036\uff9a\040\uff9a\045\uff9a\046\uff9a" +
    "\061\uff9a\071\uff9a\001\002\000\004\005\373\001\002\000" +
    "\004\044\374\001\002\000\004\006\232\001\002\000\032" +
    "\003\uff99\007\uff99\031\uff99\032\uff99\033\uff99\035\uff99\036" +
    "\uff99\040\uff99\045\uff99\046\uff99\061\uff99\071\uff99\001\002" +
    "\000\004\044\377\001\002\000\004\006\232\001\002\000" +
    "\032\003\uff98\007\uff98\031\uff98\032\uff98\033\uff98\035\uff98" +
    "\036\uff98\040\uff98\045\uff98\046\uff98\061\uff98\071\uff98\001" +
    "\002\000\004\071\u0119\001\002\000\004\071\u0103\001\002" +
    "\000\012\003\u0104\006\u0105\021\022\055\023\001\002\000" +
    "\004\055\u0118\001\002\000\004\064\u0106\001\002\000\004" +
    "\007\u0107\001\002\000\006\021\u0108\055\u0109\001\002\000" +
    "\004\006\u010a\001\002\000\032\003\uffc6\007\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\035\uffc6\036\uffc6\040\uffc6\045\uffc6\046" +
    "\uffc6\061\uffc6\071\uffc6\001\002\000\012\003\u010b\064\u010f" +
    "\067\u010d\071\u010c\001\002\000\004\007\u0116\001\002\000" +
    "\006\007\uffbc\034\uffbc\001\002\000\006\007\uffbd\034\uffbd" +
    "\001\002\000\006\007\u0111\034\u0110\001\002\000\006\007" +
    "\uffbe\034\uffbe\001\002\000\010\064\u0115\067\u0114\071\u0113" +
    "\001\002\000\004\055\u0112\001\002\000\032\003\uffc2\007" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2\040\uffc2" +
    "\045\uffc2\046\uffc2\061\uffc2\071\uffc2\001\002\000\006\007" +
    "\uffb9\034\uffb9\001\002\000\006\007\uffba\034\uffba\001\002" +
    "\000\006\007\uffbb\034\uffbb\001\002\000\004\055\u0117\001" +
    "\002\000\032\003\uffc1\007\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\035\uffc1\036\uffc1\040\uffc1\045\uffc1\046\uffc1\061\uffc1\071" +
    "\uffc1\001\002\000\032\003\uffc5\007\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\035\uffc5\036\uffc5\040\uffc5\045\uffc5\046\uffc5\061" +
    "\uffc5\071\uffc5\001\002\000\012\003\u011a\006\u011b\021\171" +
    "\055\172\001\002\000\004\055\u0127\001\002\000\004\064" +
    "\u011c\001\002\000\004\007\u011d\001\002\000\006\021\u011e" +
    "\055\u011f\001\002\000\004\006\u0120\001\002\000\032\003" +
    "\uffc4\007\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4" +
    "\040\uffc4\045\uffc4\046\uffc4\061\uffc4\071\uffc4\001\002\000" +
    "\012\003\u0121\064\u010f\067\u010d\071\u010c\001\002\000\004" +
    "\007\u0125\001\002\000\006\007\u0123\034\u0110\001\002\000" +
    "\004\055\u0124\001\002\000\032\003\uffc0\007\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\035\uffc0\036\uffc0\040\uffc0\045\uffc0\046" +
    "\uffc0\061\uffc0\071\uffc0\001\002\000\004\055\u0126\001\002" +
    "\000\032\003\uffbf\007\uffbf\031\uffbf\032\uffbf\033\uffbf\035" +
    "\uffbf\036\uffbf\040\uffbf\045\uffbf\046\uffbf\061\uffbf\071\uffbf" +
    "\001\002\000\032\003\uffc3\007\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\035\uffc3\036\uffc3\040\uffc3\045\uffc3\046\uffc3\061\uffc3" +
    "\071\uffc3\001\002\000\004\055\u012b\001\002\000\004\055" +
    "\u012a\001\002\000\032\003\uffb5\007\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\035\uffb5\036\uffb5\040\uffb5\045\uffb5\046\uffb5\061" +
    "\uffb5\071\uffb5\001\002\000\032\003\uffb4\007\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\035\uffb4\036\uffb4\040\uffb4\045\uffb4\046" +
    "\uffb4\061\uffb4\071\uffb4\001\002\000\024\010\057\011\066" +
    "\047\064\050\061\051\062\052\063\053\060\054\065\055" +
    "\u0130\001\002\000\004\055\u012f\001\002\000\032\003\uff80" +
    "\007\uff80\031\uff80\032\uff80\033\uff80\035\uff80\036\uff80\040" +
    "\uff80\045\uff80\046\uff80\061\uff80\071\uff80\001\002\000\032" +
    "\003\uff7e\007\uff7e\031\uff7e\032\uff7e\033\uff7e\035\uff7e\036" +
    "\uff7e\040\uff7e\045\uff7e\046\uff7e\061\uff7e\071\uff7e\001\002" +
    "\000\032\003\uff7f\007\uff7f\031\uff7f\032\uff7f\033\uff7f\035" +
    "\uff7f\036\uff7f\040\uff7f\045\uff7f\046\uff7f\061\uff7f\071\uff7f" +
    "\001\002\000\026\003\u013b\004\050\011\027\060\045\064" +
    "\047\065\024\066\046\067\043\070\035\071\025\001\002" +
    "\000\004\064\u0133\001\002\000\004\007\u0134\001\002\000" +
    "\004\021\u0135\001\002\000\016\004\070\011\027\064\047" +
    "\065\024\067\u0137\071\025\001\002\000\010\010\057\011" +
    "\066\055\u0139\001\002\000\004\055\u0138\001\002\000\032" +
    "\003\uffb7\007\uffb7\031\uffb7\032\uffb7\033\uffb7\035\uffb7\036" +
    "\uffb7\040\uffb7\045\uffb7\046\uffb7\061\uffb7\071\uffb7\001\002" +
    "\000\032\003\uffb8\007\uffb8\031\uffb8\032\uffb8\033\uffb8\035" +
    "\uffb8\036\uffb8\040\uffb8\045\uffb8\046\uffb8\061\uffb8\071\uffb8" +
    "\001\002\000\004\055\u013d\001\002\000\004\055\u013c\001" +
    "\002\000\032\003\uffc7\007\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\035\uffc7\036\uffc7\040\uffc7\045\uffc7\046\uffc7\061\uffc7\071" +
    "\uffc7\001\002\000\032\003\uffc8\007\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\035\uffc8\036\uffc8\040\uffc8\045\uffc8\046\uffc8\061" +
    "\uffc8\071\uffc8\001\002\000\006\005\uff85\034\uff85\001\002" +
    "\000\006\005\uff83\034\uff83\001\002\000\016\002\uff91\022" +
    "\uff91\023\uff91\024\uff91\025\uff91\026\uff91\001\002\000\004" +
    "\006\232\001\002\000\016\002\uff90\022\uff90\023\uff90\024" +
    "\uff90\025\uff90\026\uff90\001\002\000\014\022\227\023\222" +
    "\024\226\025\220\026\221\001\002\000\004\005\uff88\001" +
    "\002\000\006\005\uff87\034\u0143\001\002\000\004\005\uff86" +
    "\001\002\000\006\005\uff84\034\uff84\001\002\000\006\005" +
    "\uff81\034\uff81\001\002\000\006\005\uff82\034\uff82\001\002" +
    "\000\004\004\u014b\001\002\000\020\003\u014e\005\u014d\022" +
    "\227\023\222\024\226\025\220\026\221\001\002\000\004" +
    "\005\u0152\001\002\000\004\006\232\001\002\000\004\005" +
    "\u014f\001\002\000\004\006\232\001\002\000\016\002\uff95" +
    "\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\001\002\000" +
    "\016\002\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\001\002\000\004\006\232\001\002\000\016\002\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\001\002\000\004" +
    "\004\u0155\001\002\000\020\003\u0158\005\u0157\022\227\023" +
    "\222\024\226\025\220\026\221\001\002\000\004\005\u015c" +
    "\001\002\000\004\006\232\001\002\000\004\005\u0159\001" +
    "\002\000\004\006\232\001\002\000\016\002\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\001\002\000\016\002" +
    "\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\001\002" +
    "\000\004\006\232\001\002\000\016\002\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\001\002\000\004\004\u015f" +
    "\001\002\000\020\003\u0162\005\u0161\022\227\023\222\024" +
    "\226\025\220\026\221\001\002\000\004\005\u0166\001\002" +
    "\000\004\006\232\001\002\000\004\005\u0163\001\002\000" +
    "\004\006\232\001\002\000\016\002\uff92\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\001\002\000\016\002\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\001\002\000\004" +
    "\006\232\001\002\000\016\002\uff93\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\001\002\000\004\004\u0169\001\002" +
    "\000\020\003\u016c\005\u016b\022\227\023\222\024\226\025" +
    "\220\026\221\001\002\000\004\005\u0170\001\002\000\004" +
    "\006\232\001\002\000\004\005\u016d\001\002\000\004\006" +
    "\232\001\002\000\016\002\uff89\022\uff89\023\uff89\024\uff89" +
    "\025\uff89\026\uff89\001\002\000\016\002\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\001\002\000\004\006\232" +
    "\001\002\000\016\002\uff8a\022\uff8a\023\uff8a\024\uff8a\025" +
    "\uff8a\026\uff8a\001\002\000\004\004\u0173\001\002\000\004" +
    "\005\u0174\001\002\000\004\006\232\001\002\000\016\002" +
    "\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0173\000\006\055\003\056\004\001\001\000\006\020" +
    "\011\054\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\025\003\033" +
    "\004\036\005\040\006\031\007\035\010\030\011\051\012" +
    "\032\013\052\014\043\016\037\017\041\024\050\051\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\002" +
    "\025\003\033\004\113\005\040\006\031\007\035\010\030" +
    "\011\115\012\032\013\052\014\043\016\037\024\050\051" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\025\003\033\004\054\005\040\006" +
    "\031\007\035\010\030\014\055\016\037\024\050\051\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\025\003\033\005\111\006\031\007\035\010\030\024\050" +
    "\051\027\001\001\000\024\002\025\003\033\004\110\005" +
    "\040\006\031\007\035\010\030\024\050\051\027\001\001" +
    "\000\024\002\025\003\033\004\107\005\040\006\031\007" +
    "\035\010\030\024\050\051\027\001\001\000\024\002\025" +
    "\003\033\004\106\005\040\006\031\007\035\010\030\024" +
    "\050\051\027\001\001\000\024\002\025\003\033\004\105" +
    "\005\040\006\031\007\035\010\030\024\050\051\027\001" +
    "\001\000\024\002\025\003\033\004\104\005\040\006\031" +
    "\007\035\010\030\024\050\051\027\001\001\000\024\002" +
    "\025\003\033\004\103\005\040\006\031\007\035\010\030" +
    "\024\050\051\027\001\001\000\022\002\025\003\033\005" +
    "\066\006\031\007\035\010\030\024\050\051\027\001\001" +
    "\000\002\001\001\000\024\002\025\003\033\004\071\005" +
    "\040\006\031\007\035\010\030\024\050\051\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\025\003\033\006\102\007\035\010\030\024\050" +
    "\051\027\001\001\000\020\002\025\003\033\006\101\007" +
    "\035\010\030\024\050\051\027\001\001\000\020\002\025" +
    "\003\033\006\100\007\035\010\030\024\050\051\027\001" +
    "\001\000\020\002\025\003\033\006\077\007\035\010\030" +
    "\024\050\051\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\025\003\033\006\123\007" +
    "\035\010\030\024\050\051\027\001\001\000\002\001\001" +
    "\000\032\002\025\003\033\004\054\005\040\006\031\007" +
    "\035\010\030\013\125\014\043\016\037\024\050\051\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\141\052\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\161\001\001\000\002\001\001" +
    "\000\004\053\157\001\001\000\004\053\156\001\001\000" +
    "\002\001\001\000\004\053\145\001\001\000\004\024\150" +
    "\001\001\000\002\001\001\000\004\053\155\001\001\000" +
    "\004\053\154\001\001\000\004\053\153\001\001\000\004" +
    "\053\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\025\003\033\004\036\005\040\006\031" +
    "\007\035\010\030\011\051\012\032\013\052\014\043\016" +
    "\037\017\165\024\050\051\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\002\025\003\033\004\036\005\040\006\031\007\035" +
    "\010\030\011\051\012\032\013\052\014\043\016\037\017" +
    "\172\024\050\051\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\025\003\033\004\036\005\040\006\031\007\035\010\030" +
    "\011\051\012\032\013\052\014\043\016\037\017\177\024" +
    "\050\051\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\025\003" +
    "\033\004\036\005\040\006\031\007\035\010\030\011\051" +
    "\012\032\013\052\014\043\016\037\017\204\024\050\051" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\223\046\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u0143\001\001\000\002\001" +
    "\001\000\004\027\u013f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\232\001\001\000" +
    "\032\020\233\021\244\022\252\023\235\025\234\026\253" +
    "\030\260\031\242\032\255\033\250\036\254\050\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\025\003\033\004\u012b\005\040\006\031\007\035" +
    "\010\030\011\u012c\012\032\013\052\014\043\016\037\024" +
    "\050\051\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\020\233\021\244\022" +
    "\252\023\235\025\277\030\260\031\242\032\255\033\250" +
    "\036\254\050\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\020\233\021\244\022\252" +
    "\023\235\025\261\030\260\031\242\032\255\033\250\034" +
    "\265\035\263\036\254\050\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\020\233\021\244\022\252\023\235" +
    "\025\266\030\260\031\242\032\255\033\250\035\270\036" +
    "\254\050\256\001\001\000\002\001\001\000\036\002\025" +
    "\003\033\004\054\005\040\006\031\007\035\010\030\011" +
    "\271\012\032\013\052\014\043\016\037\024\050\051\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\025\003\033\004\054\005\040" +
    "\006\031\007\035\010\030\011\321\012\032\013\052\014" +
    "\043\016\037\024\050\051\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\323\001\001\000\010\037" +
    "\325\040\324\041\326\001\001\000\002\001\001\000\006" +
    "\040\336\041\337\001\001\000\002\001\001\000\004\027" +
    "\335\001\001\000\002\001\001\000\036\002\025\003\033" +
    "\004\054\005\040\006\031\007\035\010\030\011\332\012" +
    "\032\013\052\014\043\016\037\024\050\051\027\001\001" +
    "\000\002\001\001\000\004\027\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\u010d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\u0121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\025\003\033\004\036\005\040\006\031\007" +
    "\035\010\030\011\051\012\032\013\052\014\043\016\037" +
    "\017\u0139\024\050\051\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\025\003\033" +
    "\004\u0135\005\040\006\031\007\035\010\030\024\050\051" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u0141\001" +
    "\001\000\002\001\001\000\004\046\u0144\001\001\000\002" +
    "\001\001\000\004\047\u0145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\u014b\046\222\001\001\000\002\001" +
    "\001\000\004\027\u0150\001\001\000\002\001\001\000\004" +
    "\027\u014f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\u0155\046\222\001\001\000\002\001\001\000" +
    "\004\027\u015a\001\001\000\002\001\001\000\004\027\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u015c\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\u015f\046\222\001\001\000\002\001\001\000\004\027" +
    "\u0164\001\001\000\002\001\001\000\004\027\u0163\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u0166\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\u0169" +
    "\046\222\001\001\000\002\001\001\000\004\027\u016e\001" +
    "\001\000\002\001\001\000\004\027\u016d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u0170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\u0174\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        System.err.println("\n ERROR DE SINTAXIS:");
        System.err.println("   Linea: " + (s.left+1));
        System.err.println("   Token inesperado: " + s.value);
    }
    
    public void report_error(String message, Object info) {
        System.err.println("ERROR: " + message);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.err.println("\nERROR FATAL: No se puede recuperar del error de sintaxis");
        throw new Exception("Error de sintaxis irrecuperable en linea " + (s.left+1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // unary_negative ::= minus_operator int_literal 
            {
              Object RESULT =null;
		 System.out.println("Negativo entero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_negative",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // unary_negative ::= minus_operator float_literal 
            {
              Object RESULT =null;
		 System.out.println("Negativo flotante"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_negative",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // postfix_expression ::= identifier increment_operator 
            {
              Object RESULT =null;
		 System.out.println("Incremento (++)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // postfix_expression ::= identifier decrement_operator 
            {
              Object RESULT =null;
		 System.out.println("Decremento (--)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // arithmetic_expression ::= arithmetic_expression plus_operator term 
            {
              Object RESULT =null;
		 System.out.println("Suma (+)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // arithmetic_expression ::= arithmetic_expression plus_operator error 
            {
              Object RESULT =null;
		 System.err.println("Error:En la expresión aritmética después de +"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arithmetic_expression ::= arithmetic_expression minus_operator term 
            {
              Object RESULT =null;
		 System.out.println("Resta (-)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arithmetic_expression ::= arithmetic_expression minus_operator error 
            {
              Object RESULT =null;
		 System.err.println("Error:En la expresión aritmética después de -"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arithmetic_expression ::= term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= term multiplication_operator power 
            {
              Object RESULT =null;
		 System.out.println("Multiplicacion (*)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= term division_operator power 
            {
              Object RESULT =null;
		 System.out.println("Division (/)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= term int_division_operator power 
            {
              Object RESULT =null;
		 System.out.println("Division entera (//)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= term modulo_operator power 
            {
              Object RESULT =null;
		 System.out.println("Modulo (%)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= power 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // power ::= factor power_operator power 
            {
              Object RESULT =null;
		 System.out.println("Potencia (^)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // power ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // factor ::= left_parenthesis arithmetic_expression right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Expresion entre parentesis reconocida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= arithmetic_operands 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arithmetic_operands ::= int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arithmetic_operands ::= float_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arithmetic_operands ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithmetic_operands ::= unary_negative 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arithmetic_operands ::= postfix_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arithmetic_operands ::= array_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arithmetic_operands ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logical_expresion ::= logical_expresion_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logical_expresion_or ::= logical_expresion_or or_operator logical_expresion_and 
            {
              Object RESULT =null;
		 System.out.println("Operador logico OR (~)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_or",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical_expresion_or ::= logical_expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_or",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logical_expresion_and ::= logical_expresion_and and_operator logical_expresion_operands 
            {
              Object RESULT =null;
		 System.out.println("Operador logico AND (@)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_and",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logical_expresion_and ::= logical_expresion_operands 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_and",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logical_expresion_operands ::= not_operator logical_factor 
            {
              Object RESULT =null;
		 System.out.println("Operador logico NOT (Σ)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_operands",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // logical_expresion_operands ::= relational_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_operands",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // logical_expresion_operands ::= bool_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_operands",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // logical_expresion_operands ::= left_parenthesis logical_expresion right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_operands",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logical_expresion_operands ::= left_parenthesis error right_parenthesis 
            {
              Object RESULT =null;
		 System.err.println("Error logico entre parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_operands",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relational_expression ::= arithmetic_expression greater_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor que (>) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relational_expression ::= arithmetic_expression less_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Menor que (<) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relational_expression ::= arithmetic_expression greater_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor o igual que (>=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relational_expression ::= arithmetic_expression less_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Menor o igual que (<=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relational_expression ::= arithmetic_expression equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Igual que (==) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relational_expression ::= arithmetic_expression not_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Diferente que (!=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration_values ::= arithmetic_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration_values ::= logical_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration_values ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration_values ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= let_keyword int_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: int sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration ::= let_keyword float_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: float sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration ::= let_keyword bool_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: bool sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaration ::= let_keyword char_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: char sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaration ::= let_keyword string_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: string sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaration ::= let_keyword int_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: int con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaration ::= let_keyword float_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: float con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration ::= let_keyword bool_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: bool con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaration ::= let_keyword char_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: char con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaration ::= let_keyword string_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: string con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= error delimiter 
            {
              Object RESULT =null;
		
               System.err.println("DECLARACION con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // reassignment ::= identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Reasignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // reassignment ::= identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Reasignación con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array int sin nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // array_declaration ::= let_keyword int_keyword identifier error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array char sin nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // array_declaration ::= let_keyword char_keyword identifier error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array int con valores"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block assignment_operator left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: arreglo char con valores"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block assignment_operator left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // array_literals ::= int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // array_literals ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // array_literals ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // array_literals ::= array_literals comma_keyword int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // array_literals ::= array_literals comma_keyword CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // array_literals ::= array_literals comma_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assign_elements_array ::= identifier left_block int_literal right_block assignment_operator arithmetic_expression delimiter 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a elemento de arreglo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_elements_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assign_elements_array ::= identifier left_block int_literal right_block assignment_operator CHAR_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a elemento de arreglo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_elements_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // array_access ::= identifier left_block int_literal right_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // input_statement ::= input_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Input reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // input_statement ::= input_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en input"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // output_statement ::= output_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // output_statement ::= output_keyword int_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output entero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // output_statement ::= output_keyword float_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // output_statement ::= output_keyword bool_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output booleano"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // output_statement ::= output_keyword CHAR_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // output_statement ::= output_keyword STRING_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // output_statement ::= output_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en output"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // decide_of ::= decide_of_keyword left_parenthesis logical_expresion right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("decide of normal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // decide_of ::= decide_of_keyword left_parenthesis logical_expresion right_parenthesis block elif_list 
            {
              Object RESULT =null;
		 System.out.println("decide of con elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // decide_of ::= decide_of_keyword left_parenthesis logical_expresion right_parenthesis block else_part 
            {
              Object RESULT =null;
		 System.out.println("decide of con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // decide_of ::= decide_of_keyword left_parenthesis logical_expresion right_parenthesis block elif_list else_part 
            {
              Object RESULT =null;
		 System.out.println("decide of con elif y else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // decide_of ::= decide_of_keyword left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("Error en condicion de decide of"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // elif_list ::= elif_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // elif_list ::= elif_list elif_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // elif_part ::= elseif_keyword left_parenthesis logical_expresion right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_part",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // else_part ::= else_keyword block 
            {
              Object RESULT =null;
		 System.out.println("else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // loop ::= loop_keyword loop_content exit_when_keyword logical_expresion delimiter end_loop_$_keyword 
            {
              Object RESULT =null;
		 System.out.println("Loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // loop ::= loop_keyword error end_loop_$_keyword 
            {
              Object RESULT =null;
		 System.err.println("Error en contenido de loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // loop_content ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // loop_content ::= break_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // loop_content ::= loop_content statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // loop_content ::= loop_content break_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // break_statement ::= break_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("break"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_loop ::= for_keyword left_parenthesis declaration step_keyword int_literal to_keyword int_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop int to"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_loop ::= for_keyword left_parenthesis declaration step_keyword int_literal downto_keyword int_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop int downto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_loop ::= for_keyword left_parenthesis declaration step_keyword float_literal to_keyword float_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop float to"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_loop ::= for_keyword left_parenthesis declaration step_keyword float_literal downto_keyword float_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop float downto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_loop ::= for_keyword left_parenthesis error right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 
          System.err.println("Error en condicion de for")
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // function ::= int_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion int sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // function ::= int_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion int con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // function ::= int_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // function ::= float_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion float sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // function ::= float_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion float con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // function ::= float_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // function ::= bool_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion bool sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // function ::= bool_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion bool con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // function ::= bool_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // function ::= char_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion char sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // function ::= char_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion char con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // function ::= char_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // function ::= string_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion string sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // function ::= string_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion string con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // function ::= string_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // params ::= param params_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // params_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_tail",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // params_tail ::= comma_keyword param params_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_tail",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // param ::= int_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // param ::= float_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // param ::= bool_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // param ::= char_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // param ::= string_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // return_statement ::= return_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("return vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // return_statement ::= return_keyword arithmetic_expression delimiter 
            {
              Object RESULT =null;
		 System.out.println("return expresion aritmetica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // return_statement ::= return_keyword logical_expresion delimiter 
            {
              Object RESULT =null;
		 System.out.println("return expresion logica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // function_call ::= identifier left_parenthesis right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Llamada a funcion sin argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // function_call ::= identifier left_parenthesis args right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Llamada a funcion con argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // args ::= int_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // args ::= float_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // args ::= identifier args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // args ::= array_access args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // args_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // args_tail ::= comma_keyword int_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // args_tail ::= comma_keyword float_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // args_tail ::= comma_keyword identifier args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // args_tail ::= comma_keyword array_access args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // block ::= left_block statements right_block 
            {
              Object RESULT =null;
		 System.out.println("bloque con statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // block ::= left_block right_block 
            {
              Object RESULT =null;
		 System.out.println("bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // block ::= left_block error right_block 
            {
              Object RESULT =null;
		 System.err.println("bloque con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statement ::= reassignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // statement ::= array_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // statement ::= assign_elements_array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // statement ::= input_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // statement ::= output_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statement ::= decide_of 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // statement ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // global_variables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_variables",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // global_variables ::= global_variables declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_variables",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // principal ::= void_keyword principal_keyword left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("\n>> FUNCION PRINCIPAL reconocida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // functions ::= functions function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // program ::= global_variables principal functions 
            {
              Object RESULT =null;
		 System.out.println("\n========== PROGRAMA COMPLETO VALIDADO ==========\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
