
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\012\005\000\002\012" +
    "\003\000\002\011\005\000\002\011\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\010\000\002\017\010\000" +
    "\002\017\010\000\002\017\010\000\002\017\010\000\002" +
    "\017\004\000\002\020\006\000\002\020\006\000\002\021" +
    "\011\000\002\021\007\000\002\021\011\000\002\021\007" +
    "\000\002\021\015\000\002\021\015\000\002\021\015\000" +
    "\002\021\015\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\022\011\000\002\022\011\000\002\023\006" +
    "\000\002\027\005\000\002\027\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\035" +
    "\007\000\002\035\010\000\002\035\010\000\002\035\011" +
    "\000\002\035\007\000\002\036\003\000\002\036\004\000" +
    "\002\037\007\000\002\040\004\000\002\031\010\000\002" +
    "\031\005\000\002\033\003\000\002\033\003\000\002\033" +
    "\004\000\002\033\004\000\002\034\004\000\002\032\014" +
    "\000\002\032\014\000\002\032\014\000\002\032\014\000" +
    "\002\032\010\000\002\042\007\000\002\042\010\000\002" +
    "\042\010\000\002\042\007\000\002\042\010\000\002\042" +
    "\010\000\002\042\007\000\002\042\010\000\002\042\010" +
    "\000\002\042\007\000\002\042\010\000\002\042\010\000" +
    "\002\042\007\000\002\042\010\000\002\042\010\000\002" +
    "\044\004\000\002\046\002\000\002\046\005\000\002\045" +
    "\004\000\002\045\004\000\002\045\004\000\002\045\004" +
    "\000\002\045\004\000\002\047\004\000\002\047\005\000" +
    "\002\050\005\000\002\050\006\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\052" +
    "\002\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\005\000\002\025\003\000\002\025\004\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\054\002\000\002\054\004\000\002\053\007\000\002" +
    "\043\002\000\002\043\004\000\002\055\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0166\000\010\003\uff69\027\uff69\031\uff69\001\002\000" +
    "\010\003\007\027\010\031\013\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\055\262\001" +
    "\002\000\004\030\u0165\001\002\000\016\002\uff66\022\uff66" +
    "\023\uff66\024\uff66\025\uff66\026\uff66\001\002\000\010\003" +
    "\uff68\027\uff68\031\uff68\001\002\000\014\022\017\023\014" +
    "\024\020\025\016\026\015\001\002\000\004\071\167\001" +
    "\002\000\004\071\162\001\002\000\004\071\155\001\002" +
    "\000\004\071\150\001\002\000\004\071\021\001\002\000" +
    "\006\021\022\055\023\001\002\000\022\004\046\011\027" +
    "\064\045\065\024\066\044\067\043\070\035\071\025\001" +
    "\002\000\036\003\uffd6\007\uffd6\027\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\035\uffd6\036\uffd6\040\uffd6\041\uffd6\045\uffd6\046" +
    "\uffd6\061\uffd6\071\uffd6\001\002\000\044\005\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\001\002\000\054\004\116\005\uffec\006" +
    "\117\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\120\020\121\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\001\002" +
    "\000\044\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\001\002\000" +
    "\006\064\115\065\114\001\002\000\044\005\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\001\002\000\044\005\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\001\002\000\042\005\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\001\002\000\012\005\uffe5\055\uffe5\056\053\057\uffe5\001" +
    "\002\000\044\005\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\001\002" +
    "\000\004\055\uffd9\001\002\000\044\005\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\112\047\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\001\002\000\032\005\uffdc\010\064\011\065" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\001\002\000\026\005\uffe3\047\061" +
    "\050\056\051\057\052\060\053\055\054\062\055\uffe3\056" +
    "\uffe3\057\uffe3\001\002\000\042\005\ufff8\010\ufff8\011\ufff8" +
    "\012\072\013\071\014\070\015\073\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\001\002\000\004\055\111\001\002\000\004\055\uffda\001" +
    "\002\000\044\005\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\001\002" +
    "\000\044\005\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\001\002\000" +
    "\016\004\046\011\027\064\045\065\024\066\044\071\025" +
    "\001\002\000\044\005\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\001" +
    "\002\000\006\055\uffdb\057\051\001\002\000\016\004\046" +
    "\011\027\064\045\065\024\066\044\071\025\001\002\000" +
    "\012\005\uffe6\055\uffe6\056\053\057\uffe6\001\002\000\016" +
    "\004\046\011\027\064\045\065\024\066\044\071\025\001" +
    "\002\000\026\005\uffe4\047\061\050\056\051\057\052\060" +
    "\053\055\054\062\055\uffe4\056\uffe4\057\uffe4\001\002\000" +
    "\016\004\046\011\027\064\045\065\024\066\044\071\025" +
    "\001\002\000\016\004\046\011\027\064\045\065\024\066" +
    "\044\071\025\001\002\000\016\004\046\011\027\064\045" +
    "\065\024\066\044\071\025\001\002\000\016\004\046\011" +
    "\027\064\045\065\024\066\044\071\025\001\002\000\016" +
    "\004\046\011\027\064\045\065\024\066\044\071\025\001" +
    "\002\000\016\004\046\011\027\064\045\065\024\066\044" +
    "\071\025\001\002\000\032\005\uffdd\010\064\011\065\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\001\002\000\020\003\101\004\046\011" +
    "\027\064\045\065\024\066\044\071\025\001\002\000\020" +
    "\003\067\004\046\011\027\064\045\065\024\066\044\071" +
    "\025\001\002\000\042\005\ufffa\010\ufffa\011\ufffa\012\072" +
    "\013\071\014\070\015\073\047\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\001\002" +
    "\000\032\005\ufff9\010\ufff9\011\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\001\002\000\016\004\046\011\027\064\045\065\024\066" +
    "\044\071\025\001\002\000\016\004\046\011\027\064\045" +
    "\065\024\066\044\071\025\001\002\000\016\004\046\011" +
    "\027\064\045\065\024\066\044\071\025\001\002\000\016" +
    "\004\046\011\027\064\045\065\024\066\044\071\025\001" +
    "\002\000\042\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\001\002\000\042" +
    "\005\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\057\ufff7\001\002\000\042\005\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\001\002\000\042\005\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\047\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\001\002\000\042\005\ufffc\010\ufffc\011\ufffc\012\072\013" +
    "\071\014\070\015\073\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\001\002\000" +
    "\032\005\ufffb\010\ufffb\011\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\001" +
    "\002\000\032\005\uffe2\010\064\011\065\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\001\002\000\032\005\uffdf\010\064\011\065\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\001\002\000\032\005\uffe0\010\064\011\065" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\001\002\000\032\005\uffe1\010\064" +
    "\011\065\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000\032\005\uffde" +
    "\010\064\011\065\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\uffde\057\uffde\001\002\000\010" +
    "\005\110\010\064\011\065\001\002\000\044\005\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\001\002\000\036\003\uffd1\007\uffd1" +
    "\027\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\040" +
    "\uffd1\041\uffd1\045\uffd1\046\uffd1\061\uffd1\071\uffd1\001\002" +
    "\000\016\004\046\011\027\064\045\065\024\066\044\071" +
    "\025\001\002\000\042\005\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\001\002" +
    "\000\044\005\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\047\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\001\002\000" +
    "\044\005\000\010\000\011\000\012\000\013\000\014\000" +
    "\015\000\016\000\047\000\050\000\051\000\052\000\053" +
    "\000\054\000\055\000\056\000\057\000\001\002\000\012" +
    "\005\130\064\131\065\127\071\125\001\002\000\004\064" +
    "\122\001\002\000\044\005\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\001\002\000\044\005\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001" +
    "\002\000\004\007\123\001\002\000\046\005\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\034" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\001\002\000\004\005\147\001" +
    "\002\000\010\005\uff7d\006\117\034\132\001\002\000\006" +
    "\005\uff7d\034\132\001\002\000\006\005\uff7d\034\132\001" +
    "\002\000\044\005\uff83\010\uff83\011\uff83\012\uff83\013\uff83" +
    "\014\uff83\015\uff83\016\uff83\047\uff83\050\uff83\051\uff83\052" +
    "\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\001\002" +
    "\000\006\005\uff7d\034\132\001\002\000\010\064\137\065" +
    "\136\071\134\001\002\000\004\005\uff81\001\002\000\010" +
    "\005\uff7d\006\117\034\132\001\002\000\006\005\uff7d\034" +
    "\132\001\002\000\006\005\uff7d\034\132\001\002\000\006" +
    "\005\uff7d\034\132\001\002\000\004\005\uff7c\001\002\000" +
    "\004\005\uff7b\001\002\000\004\005\uff79\001\002\000\004" +
    "\005\uff7a\001\002\000\004\005\uff80\001\002\000\004\005" +
    "\uff7e\001\002\000\004\005\uff7f\001\002\000\044\005\uff82" +
    "\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016" +
    "\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82" +
    "\055\uff82\056\uff82\057\uff82\001\002\000\006\021\151\055" +
    "\152\001\002\000\022\004\046\011\027\064\045\065\024" +
    "\066\044\067\043\070\035\071\025\001\002\000\036\003" +
    "\uffd8\007\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8" +
    "\036\uffd8\040\uffd8\041\uffd8\045\uffd8\046\uffd8\061\uffd8\071" +
    "\uffd8\001\002\000\004\055\154\001\002\000\036\003\uffd3" +
    "\007\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036" +
    "\uffd3\040\uffd3\041\uffd3\045\uffd3\046\uffd3\061\uffd3\071\uffd3" +
    "\001\002\000\006\021\156\055\157\001\002\000\022\004" +
    "\046\011\027\064\045\065\024\066\044\067\043\070\035" +
    "\071\025\001\002\000\036\003\uffd5\007\uffd5\027\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5" +
    "\045\uffd5\046\uffd5\061\uffd5\071\uffd5\001\002\000\004\055" +
    "\161\001\002\000\036\003\uffd0\007\uffd0\027\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0\045" +
    "\uffd0\046\uffd0\061\uffd0\071\uffd0\001\002\000\006\021\163" +
    "\055\164\001\002\000\022\004\046\011\027\064\045\065" +
    "\024\066\044\067\043\070\035\071\025\001\002\000\036" +
    "\003\uffd4\007\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\035" +
    "\uffd4\036\uffd4\040\uffd4\041\uffd4\045\uffd4\046\uffd4\061\uffd4" +
    "\071\uffd4\001\002\000\004\055\166\001\002\000\036\003" +
    "\uffcf\007\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf" +
    "\036\uffcf\040\uffcf\041\uffcf\045\uffcf\046\uffcf\061\uffcf\071" +
    "\uffcf\001\002\000\006\021\170\055\171\001\002\000\022" +
    "\004\046\011\027\064\045\065\024\066\044\067\043\070" +
    "\035\071\025\001\002\000\036\003\uffd7\007\uffd7\027\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7\040\uffd7\041" +
    "\uffd7\045\uffd7\046\uffd7\061\uffd7\071\uffd7\001\002\000\004" +
    "\055\173\001\002\000\036\003\uffd2\007\uffd2\027\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2" +
    "\045\uffd2\046\uffd2\061\uffd2\071\uffd2\001\002\000\016\002" +
    "\uff64\022\201\023\177\024\202\025\200\026\176\001\002" +
    "\000\016\002\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026" +
    "\uff65\001\002\000\004\071\u015b\001\002\000\004\071\u0151" +
    "\001\002\000\004\071\u0147\001\002\000\004\071\u013d\001" +
    "\002\000\004\071\203\001\002\000\004\004\204\001\002" +
    "\000\020\003\215\005\212\022\213\023\207\024\214\025" +
    "\205\026\206\001\002\000\004\071\u013c\001\002\000\004" +
    "\071\u013b\001\002\000\004\071\u013a\001\002\000\006\005" +
    "\uff8c\034\u0136\001\002\000\004\005\u0134\001\002\000\004" +
    "\006\217\001\002\000\004\071\u0132\001\002\000\004\071" +
    "\u0131\001\002\000\004\005\216\001\002\000\004\006\217" +
    "\001\002\000\026\003\233\007\225\031\231\032\227\033" +
    "\237\035\246\040\232\045\226\061\235\071\224\001\002" +
    "\000\016\002\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026" +
    "\uff94\001\002\000\032\003\uff73\007\uff73\031\uff73\032\uff73" +
    "\033\uff73\035\uff73\036\uff73\040\uff73\045\uff73\046\uff73\061" +
    "\uff73\071\uff73\001\002\000\026\003\uff75\007\uff75\031\uff75" +
    "\032\uff75\033\uff75\035\uff75\040\uff75\045\uff75\061\uff75\071" +
    "\uff75\001\002\000\032\003\uff70\007\uff70\031\uff70\032\uff70" +
    "\033\uff70\035\uff70\036\uff70\040\uff70\045\uff70\046\uff70\061" +
    "\uff70\071\uff70\001\002\000\006\006\u0125\021\u0124\001\002" +
    "\000\052\002\uff77\003\uff77\007\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\031\uff77\032\uff77\033\uff77\035\uff77" +
    "\036\uff77\040\uff77\045\uff77\046\uff77\061\uff77\062\uff77\063" +
    "\uff77\071\uff77\001\002\000\020\004\046\011\027\055\u0121" +
    "\064\045\065\024\066\044\071\025\001\002\000\006\003" +
    "\u011d\071\u011e\001\002\000\032\003\uff6e\007\uff6e\031\uff6e" +
    "\032\uff6e\033\uff6e\035\uff6e\036\uff6e\040\uff6e\045\uff6e\046" +
    "\uff6e\061\uff6e\071\uff6e\001\002\000\014\022\367\023\014" +
    "\024\020\025\366\026\015\001\002\000\004\004\331\001" +
    "\002\000\006\007\330\055\262\001\002\000\032\003\uff72" +
    "\007\uff72\031\uff72\032\uff72\033\uff72\035\uff72\036\uff72\040" +
    "\uff72\045\uff72\046\uff72\061\uff72\071\uff72\001\002\000\004" +
    "\004\305\001\002\000\032\003\uff6b\007\uff6b\031\uff6b\032" +
    "\uff6b\033\uff6b\035\uff6b\036\uff6b\040\uff6b\045\uff6b\046\uff6b" +
    "\061\uff6b\071\uff6b\001\002\000\020\003\271\064\275\065" +
    "\273\066\267\067\272\070\274\071\270\001\002\000\032" +
    "\003\uff71\007\uff71\031\uff71\032\uff71\033\uff71\035\uff71\036" +
    "\uff71\040\uff71\045\uff71\046\uff71\061\uff71\071\uff71\001\002" +
    "\000\026\003\007\007\266\031\231\032\227\033\237\035" +
    "\246\040\232\045\226\061\235\071\224\001\002\000\032" +
    "\003\uff6c\007\uff6c\031\uff6c\032\uff6c\033\uff6c\035\uff6c\036" +
    "\uff6c\040\uff6c\045\uff6c\046\uff6c\061\uff6c\071\uff6c\001\002" +
    "\000\032\003\uff6d\007\uff6d\031\uff6d\032\uff6d\033\uff6d\035" +
    "\uff6d\036\uff6d\040\uff6d\045\uff6d\046\uff6d\061\uff6d\071\uff6d" +
    "\001\002\000\032\003\uff6a\007\uff6a\031\uff6a\032\uff6a\033" +
    "\uff6a\035\uff6a\036\uff6a\040\uff6a\045\uff6a\046\uff6a\061\uff6a" +
    "\071\uff6a\001\002\000\032\003\uff6f\007\uff6f\031\uff6f\032" +
    "\uff6f\033\uff6f\035\uff6f\036\uff6f\040\uff6f\045\uff6f\046\uff6f" +
    "\061\uff6f\071\uff6f\001\002\000\026\003\252\031\231\032" +
    "\227\033\237\035\246\040\232\045\226\046\250\061\235" +
    "\071\224\001\002\000\030\003\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\035\uffa6\036\uffa6\040\uffa6\045\uffa6\046\uffa6\061\uffa6" +
    "\071\uffa6\001\002\000\004\055\264\001\002\000\030\003" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\035\uffa5\036\uffa5\040\uffa5" +
    "\045\uffa5\046\uffa5\061\uffa5\071\uffa5\001\002\000\006\037" +
    "\263\055\262\001\002\000\030\003\007\031\231\032\227" +
    "\033\237\035\246\036\255\040\232\045\226\046\250\061" +
    "\235\071\224\001\002\000\030\003\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\035\uffa4\036\uffa4\040\uffa4\045\uffa4\046\uffa4\061" +
    "\uffa4\071\uffa4\001\002\000\016\004\046\011\027\064\045" +
    "\065\024\066\044\071\025\001\002\000\030\003\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\035\uffa3\036\uffa3\040\uffa3\045\uffa3" +
    "\046\uffa3\061\uffa3\071\uffa3\001\002\000\006\055\260\057" +
    "\051\001\002\000\004\037\261\001\002\000\032\003\uffa8" +
    "\007\uffa8\031\uffa8\032\uffa8\033\uffa8\035\uffa8\036\uffa8\040" +
    "\uffa8\045\uffa8\046\uffa8\061\uffa8\071\uffa8\001\002\000\036" +
    "\003\uffce\007\uffce\027\uffce\031\uffce\032\uffce\033\uffce\035" +
    "\uffce\036\uffce\040\uffce\041\uffce\045\uffce\046\uffce\061\uffce" +
    "\071\uffce\001\002\000\032\003\uffa7\007\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\035\uffa7\036\uffa7\040\uffa7\045\uffa7\046\uffa7" +
    "\061\uffa7\071\uffa7\001\002\000\030\003\uffa2\031\uffa2\032" +
    "\uffa2\033\uffa2\035\uffa2\036\uffa2\040\uffa2\045\uffa2\046\uffa2" +
    "\061\uffa2\071\uffa2\001\002\000\026\003\uff74\007\uff74\031" +
    "\uff74\032\uff74\033\uff74\035\uff74\040\uff74\045\uff74\061\uff74" +
    "\071\uff74\001\002\000\052\002\uff78\003\uff78\007\uff78\022" +
    "\uff78\023\uff78\024\uff78\025\uff78\026\uff78\031\uff78\032\uff78" +
    "\033\uff78\035\uff78\036\uff78\040\uff78\045\uff78\046\uff78\061" +
    "\uff78\062\uff78\063\uff78\071\uff78\001\002\000\004\055\304" +
    "\001\002\000\004\055\303\001\002\000\004\055\302\001" +
    "\002\000\004\055\301\001\002\000\004\055\300\001\002" +
    "\000\004\055\277\001\002\000\004\055\276\001\002\000" +
    "\032\003\uffb7\007\uffb7\031\uffb7\032\uffb7\033\uffb7\035\uffb7" +
    "\036\uffb7\040\uffb7\045\uffb7\046\uffb7\061\uffb7\071\uffb7\001" +
    "\002\000\032\003\uffb3\007\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\035\uffb3\036\uffb3\040\uffb3\045\uffb3\046\uffb3\061\uffb3\071" +
    "\uffb3\001\002\000\032\003\uffb6\007\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\035\uffb6\036\uffb6\040\uffb6\045\uffb6\046\uffb6\061" +
    "\uffb6\071\uffb6\001\002\000\032\003\uffb4\007\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\035\uffb4\036\uffb4\040\uffb4\045\uffb4\046" +
    "\uffb4\061\uffb4\071\uffb4\001\002\000\032\003\uffb2\007\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\040\uffb2\045" +
    "\uffb2\046\uffb2\061\uffb2\071\uffb2\001\002\000\032\003\uffb8" +
    "\007\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8\036\uffb8\040" +
    "\uffb8\045\uffb8\046\uffb8\061\uffb8\071\uffb8\001\002\000\032" +
    "\003\uffb5\007\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5\036" +
    "\uffb5\040\uffb5\045\uffb5\046\uffb5\061\uffb5\071\uffb5\001\002" +
    "\000\020\003\306\004\046\011\027\064\045\065\024\066" +
    "\044\071\025\001\002\000\004\005\326\001\002\000\006" +
    "\005\310\057\051\001\002\000\004\006\217\001\002\000" +
    "\036\003\uffb1\007\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1" +
    "\036\uffb1\040\uffb1\045\uffb1\046\uffb1\061\uffb1\062\316\063" +
    "\314\071\uffb1\001\002\000\036\003\uffac\007\uffac\031\uffac" +
    "\032\uffac\033\uffac\035\uffac\036\uffac\040\uffac\045\uffac\046" +
    "\uffac\061\uffac\062\uffac\063\uffac\071\uffac\001\002\000\036" +
    "\003\uffb0\007\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036" +
    "\uffb0\040\uffb0\045\uffb0\046\uffb0\061\uffb0\062\316\063\314" +
    "\071\uffb0\001\002\000\004\006\217\001\002\000\032\003" +
    "\uffaf\007\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf" +
    "\040\uffaf\045\uffaf\046\uffaf\061\uffaf\071\uffaf\001\002\000" +
    "\004\004\317\001\002\000\016\004\046\011\027\064\045" +
    "\065\024\066\044\071\025\001\002\000\006\005\321\057" +
    "\051\001\002\000\004\006\217\001\002\000\036\003\uffaa" +
    "\007\uffaa\031\uffaa\032\uffaa\033\uffaa\035\uffaa\036\uffaa\040" +
    "\uffaa\045\uffaa\046\uffaa\061\uffaa\062\uffaa\063\uffaa\071\uffaa" +
    "\001\002\000\032\003\uffa9\007\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\035\uffa9\036\uffa9\040\uffa9\045\uffa9\046\uffa9\061\uffa9" +
    "\071\uffa9\001\002\000\036\003\uffab\007\uffab\031\uffab\032" +
    "\uffab\033\uffab\035\uffab\036\uffab\040\uffab\045\uffab\046\uffab" +
    "\061\uffab\062\uffab\063\uffab\071\uffab\001\002\000\032\003" +
    "\uffae\007\uffae\031\uffae\032\uffae\033\uffae\035\uffae\036\uffae" +
    "\040\uffae\045\uffae\046\uffae\061\uffae\071\uffae\001\002\000" +
    "\004\006\217\001\002\000\032\003\uffad\007\uffad\031\uffad" +
    "\032\uffad\033\uffad\035\uffad\036\uffad\040\uffad\045\uffad\046" +
    "\uffad\061\uffad\071\uffad\001\002\000\052\002\uff76\003\uff76" +
    "\007\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026\uff76\031" +
    "\uff76\032\uff76\033\uff76\035\uff76\036\uff76\040\uff76\045\uff76" +
    "\046\uff76\061\uff76\062\uff76\063\uff76\071\uff76\001\002\000" +
    "\006\003\332\031\013\001\002\000\006\005\363\055\262" +
    "\001\002\000\004\041\334\001\002\000\006\064\336\065" +
    "\335\001\002\000\006\042\352\043\351\001\002\000\006" +
    "\042\340\043\337\001\002\000\004\064\345\001\002\000" +
    "\004\064\341\001\002\000\004\005\342\001\002\000\004" +
    "\044\343\001\002\000\004\006\217\001\002\000\032\003" +
    "\uffa1\007\uffa1\031\uffa1\032\uffa1\033\uffa1\035\uffa1\036\uffa1" +
    "\040\uffa1\045\uffa1\046\uffa1\061\uffa1\071\uffa1\001\002\000" +
    "\004\005\346\001\002\000\004\044\347\001\002\000\004" +
    "\006\217\001\002\000\032\003\uffa0\007\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\035\uffa0\036\uffa0\040\uffa0\045\uffa0\046\uffa0" +
    "\061\uffa0\071\uffa0\001\002\000\004\065\357\001\002\000" +
    "\004\065\353\001\002\000\004\005\354\001\002\000\004" +
    "\044\355\001\002\000\004\006\217\001\002\000\032\003" +
    "\uff9f\007\uff9f\031\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f" +
    "\040\uff9f\045\uff9f\046\uff9f\061\uff9f\071\uff9f\001\002\000" +
    "\004\005\360\001\002\000\004\044\361\001\002\000\004" +
    "\006\217\001\002\000\032\003\uff9e\007\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\035\uff9e\036\uff9e\040\uff9e\045\uff9e\046\uff9e" +
    "\061\uff9e\071\uff9e\001\002\000\004\044\364\001\002\000" +
    "\004\006\217\001\002\000\032\003\uff9d\007\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\035\uff9d\036\uff9d\040\uff9d\045\uff9d\046" +
    "\uff9d\061\uff9d\071\uff9d\001\002\000\004\071\u010e\001\002" +
    "\000\004\071\370\001\002\000\012\003\371\006\372\021" +
    "\151\055\152\001\002\000\004\055\u010d\001\002\000\004" +
    "\064\373\001\002\000\004\007\374\001\002\000\006\021" +
    "\375\055\376\001\002\000\004\006\377\001\002\000\032" +
    "\003\uffcb\007\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036" +
    "\uffcb\040\uffcb\045\uffcb\046\uffcb\061\uffcb\071\uffcb\001\002" +
    "\000\012\003\u0100\064\u0104\067\u0103\071\u0101\001\002\000" +
    "\004\007\u010b\001\002\000\006\007\uffc1\034\uffc1\001\002" +
    "\000\006\007\u0106\034\u0105\001\002\000\006\007\uffc2\034" +
    "\uffc2\001\002\000\006\007\uffc3\034\uffc3\001\002\000\010" +
    "\064\u010a\067\u0109\071\u0108\001\002\000\004\055\u0107\001" +
    "\002\000\032\003\uffc7\007\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\035\uffc7\036\uffc7\040\uffc7\045\uffc7\046\uffc7\061\uffc7\071" +
    "\uffc7\001\002\000\006\007\uffbe\034\uffbe\001\002\000\006" +
    "\007\uffbf\034\uffbf\001\002\000\006\007\uffc0\034\uffc0\001" +
    "\002\000\004\055\u010c\001\002\000\032\003\uffc6\007\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\035\uffc6\036\uffc6\040\uffc6\045" +
    "\uffc6\046\uffc6\061\uffc6\071\uffc6\001\002\000\032\003\uffca" +
    "\007\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca\040" +
    "\uffca\045\uffca\046\uffca\061\uffca\071\uffca\001\002\000\012" +
    "\003\u010f\006\u0110\021\156\055\157\001\002\000\004\055" +
    "\u011c\001\002\000\004\064\u0111\001\002\000\004\007\u0112" +
    "\001\002\000\006\021\u0113\055\u0114\001\002\000\004\006" +
    "\u0115\001\002\000\032\003\uffc9\007\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\035\uffc9\036\uffc9\040\uffc9\045\uffc9\046\uffc9\061" +
    "\uffc9\071\uffc9\001\002\000\012\003\u0116\064\u0104\067\u0103" +
    "\071\u0101\001\002\000\004\007\u011a\001\002\000\006\007" +
    "\u0118\034\u0105\001\002\000\004\055\u0119\001\002\000\032" +
    "\003\uffc5\007\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\036" +
    "\uffc5\040\uffc5\045\uffc5\046\uffc5\061\uffc5\071\uffc5\001\002" +
    "\000\004\055\u011b\001\002\000\032\003\uffc4\007\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4\040\uffc4\045\uffc4" +
    "\046\uffc4\061\uffc4\071\uffc4\001\002\000\032\003\uffc8\007" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\040\uffc8" +
    "\045\uffc8\046\uffc8\061\uffc8\071\uffc8\001\002\000\004\055" +
    "\u0120\001\002\000\004\055\u011f\001\002\000\032\003\uffba" +
    "\007\uffba\031\uffba\032\uffba\033\uffba\035\uffba\036\uffba\040" +
    "\uffba\045\uffba\046\uffba\061\uffba\071\uffba\001\002\000\032" +
    "\003\uffb9\007\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9\036" +
    "\uffb9\040\uffb9\045\uffb9\046\uffb9\061\uffb9\071\uffb9\001\002" +
    "\000\032\003\uff85\007\uff85\031\uff85\032\uff85\033\uff85\035" +
    "\uff85\036\uff85\040\uff85\045\uff85\046\uff85\061\uff85\071\uff85" +
    "\001\002\000\006\055\u0123\057\051\001\002\000\032\003" +
    "\uff84\007\uff84\031\uff84\032\uff84\033\uff84\035\uff84\036\uff84" +
    "\040\uff84\045\uff84\046\uff84\061\uff84\071\uff84\001\002\000" +
    "\024\003\u012e\004\046\011\027\064\045\065\024\066\044" +
    "\067\043\070\035\071\025\001\002\000\004\064\u0126\001" +
    "\002\000\004\007\u0127\001\002\000\004\021\u0128\001\002" +
    "\000\020\004\046\011\027\064\045\065\024\066\044\067" +
    "\u012a\071\025\001\002\000\010\010\064\011\065\055\u012c" +
    "\001\002\000\004\055\u012b\001\002\000\032\003\uffbc\007" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\035\uffbc\036\uffbc\040\uffbc" +
    "\045\uffbc\046\uffbc\061\uffbc\071\uffbc\001\002\000\032\003" +
    "\uffbd\007\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd\036\uffbd" +
    "\040\uffbd\045\uffbd\046\uffbd\061\uffbd\071\uffbd\001\002\000" +
    "\004\055\u0130\001\002\000\004\055\u012f\001\002\000\032" +
    "\003\uffcc\007\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\036" +
    "\uffcc\040\uffcc\045\uffcc\046\uffcc\061\uffcc\071\uffcc\001\002" +
    "\000\032\003\uffcd\007\uffcd\031\uffcd\032\uffcd\033\uffcd\035" +
    "\uffcd\036\uffcd\040\uffcd\045\uffcd\046\uffcd\061\uffcd\071\uffcd" +
    "\001\002\000\006\005\uff88\034\uff88\001\002\000\006\005" +
    "\uff8a\034\uff8a\001\002\000\016\002\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\001\002\000\004\006\217\001" +
    "\002\000\016\002\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\026\uff95\001\002\000\014\022\213\023\207\024\214\025" +
    "\205\026\206\001\002\000\004\005\uff8d\001\002\000\006" +
    "\005\uff8c\034\u0136\001\002\000\004\005\uff8b\001\002\000" +
    "\006\005\uff89\034\uff89\001\002\000\006\005\uff86\034\uff86" +
    "\001\002\000\006\005\uff87\034\uff87\001\002\000\004\004" +
    "\u013e\001\002\000\020\003\u0141\005\u0140\022\213\023\207" +
    "\024\214\025\205\026\206\001\002\000\004\005\u0145\001" +
    "\002\000\004\006\217\001\002\000\004\005\u0142\001\002" +
    "\000\004\006\217\001\002\000\016\002\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\025\uff9a\026\uff9a\001\002\000\016\002\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\001\002\000" +
    "\004\006\217\001\002\000\016\002\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\001\002\000\004\004\u0148\001" +
    "\002\000\020\003\u014b\005\u014a\022\213\023\207\024\214" +
    "\025\205\026\206\001\002\000\004\005\u014f\001\002\000" +
    "\004\006\217\001\002\000\004\005\u014c\001\002\000\004" +
    "\006\217\001\002\000\016\002\uff91\022\uff91\023\uff91\024" +
    "\uff91\025\uff91\026\uff91\001\002\000\016\002\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\001\002\000\004\006" +
    "\217\001\002\000\016\002\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\uff92\001\002\000\004\004\u0152\001\002\000" +
    "\020\003\u0155\005\u0154\022\213\023\207\024\214\025\205" +
    "\026\206\001\002\000\004\005\u0159\001\002\000\004\006" +
    "\217\001\002\000\004\005\u0156\001\002\000\004\006\217" +
    "\001\002\000\016\002\uff97\022\uff97\023\uff97\024\uff97\025" +
    "\uff97\026\uff97\001\002\000\016\002\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\001\002\000\004\006\217\001" +
    "\002\000\016\002\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\001\002\000\004\004\u015c\001\002\000\020\003" +
    "\u015f\005\u015e\022\213\023\207\024\214\025\205\026\206" +
    "\001\002\000\004\005\u0163\001\002\000\004\006\217\001" +
    "\002\000\004\005\u0160\001\002\000\004\006\217\001\002" +
    "\000\016\002\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\001\002\000\016\002\uff90\022\uff90\023\uff90\024\uff90" +
    "\025\uff90\026\uff90\001\002\000\004\006\217\001\002\000" +
    "\016\002\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f" +
    "\001\002\000\004\004\u0166\001\002\000\004\005\u0167\001" +
    "\002\000\004\006\217\001\002\000\016\002\uff67\022\uff67" +
    "\023\uff67\024\uff67\025\uff67\026\uff67\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0166\000\006\054\003\055\004\001\001\000\006\017" +
    "\011\053\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\025\003\033" +
    "\004\036\005\040\006\031\007\035\010\030\011\032\012" +
    "\047\015\037\016\041\023\046\050\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\025" +
    "\003\033\004\106\005\040\006\031\007\035\010\030\023" +
    "\046\050\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\025\003\033\004\036\005\040\006\031\007" +
    "\035\010\030\011\051\015\037\023\046\050\027\001\001" +
    "\000\002\001\001\000\026\002\025\003\033\004\036\005" +
    "\040\006\031\007\035\010\030\015\053\023\046\050\027" +
    "\001\001\000\002\001\001\000\024\002\025\003\033\004" +
    "\105\005\040\006\031\007\035\010\030\023\046\050\027" +
    "\001\001\000\024\002\025\003\033\004\104\005\040\006" +
    "\031\007\035\010\030\023\046\050\027\001\001\000\024" +
    "\002\025\003\033\004\103\005\040\006\031\007\035\010" +
    "\030\023\046\050\027\001\001\000\024\002\025\003\033" +
    "\004\102\005\040\006\031\007\035\010\030\023\046\050" +
    "\027\001\001\000\024\002\025\003\033\004\101\005\040" +
    "\006\031\007\035\010\030\023\046\050\027\001\001\000" +
    "\024\002\025\003\033\004\062\005\040\006\031\007\035" +
    "\010\030\023\046\050\027\001\001\000\002\001\001\000" +
    "\022\002\025\003\033\005\077\006\031\007\035\010\030" +
    "\023\046\050\027\001\001\000\022\002\025\003\033\005" +
    "\065\006\031\007\035\010\030\023\046\050\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\025\003" +
    "\033\006\076\007\035\010\030\023\046\050\027\001\001" +
    "\000\020\002\025\003\033\006\075\007\035\010\030\023" +
    "\046\050\027\001\001\000\020\002\025\003\033\006\074" +
    "\007\035\010\030\023\046\050\027\001\001\000\020\002" +
    "\025\003\033\006\073\007\035\010\030\023\046\050\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\025\003\033\006" +
    "\112\007\035\010\030\023\046\050\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\125\051\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\145\001\001\000\004\052\144" +
    "\001\001\000\004\052\143\001\001\000\002\001\001\000" +
    "\004\052\132\001\001\000\004\023\134\001\001\000\002" +
    "\001\001\000\004\052\142\001\001\000\004\052\141\001" +
    "\001\000\004\052\140\001\001\000\004\052\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\025\003\033\004\036\005\040\006\031\007\035\010\030" +
    "\011\032\012\047\015\037\016\152\023\046\050\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\025\003\033\004\036\005" +
    "\040\006\031\007\035\010\030\011\032\012\047\015\037" +
    "\016\157\023\046\050\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\025\003\033\004\036\005\040\006\031\007\035\010" +
    "\030\011\032\012\047\015\037\016\164\023\046\050\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\025\003\033\004\036" +
    "\005\040\006\031\007\035\010\030\011\032\012\047\015" +
    "\037\016\171\023\046\050\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\210\045\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u0136\001\001\000\002\001\001\000\004\026\u0132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\217\001\001\000\032\017\220\020\233\021\237" +
    "\022\222\024\221\025\240\027\244\030\227\031\241\032" +
    "\235\035\242\047\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\025\003\033\004\036" +
    "\005\040\006\031\007\035\010\030\011\032\012\u0121\015" +
    "\037\023\046\050\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\017\220\020" +
    "\233\021\237\022\222\024\264\027\244\030\227\031\241" +
    "\032\235\035\242\047\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\017\220\020\233\021\237\022\222\024\246\027\244\030" +
    "\227\031\241\032\235\033\252\034\250\035\242\047\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\017\220\020\233\021\237" +
    "\022\222\024\253\027\244\030\227\031\241\032\235\034" +
    "\255\035\242\047\243\001\001\000\002\001\001\000\032" +
    "\002\025\003\033\004\036\005\040\006\031\007\035\010" +
    "\030\011\032\012\256\015\037\023\046\050\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\025\003\033\004\036\005\040\006\031" +
    "\007\035\010\030\011\032\012\306\015\037\023\046\050" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\310\001\001\000\010\036\312\037\311\040\314\001" +
    "\001\000\002\001\001\000\006\037\323\040\324\001\001" +
    "\000\004\026\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\025\003\033\004\036\005\040\006\031" +
    "\007\035\010\030\011\032\012\317\015\037\023\046\050" +
    "\027\001\001\000\002\001\001\000\004\026\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\025\003" +
    "\033\004\036\005\040\006\031\007\035\010\030\011\032" +
    "\012\047\015\037\016\u012c\023\046\050\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\025\003\033\004\u0128\005\040\006\031\007\035\010" +
    "\030\023\046\050\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0134\001\001\000\002\001\001\000\004\045\u0137" +
    "\001\001\000\002\001\001\000\004\046\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\u013e\045\207\001" +
    "\001\000\002\001\001\000\004\026\u0143\001\001\000\002" +
    "\001\001\000\004\026\u0142\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u0145\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\u0148\045\207\001\001\000" +
    "\002\001\001\000\004\026\u014d\001\001\000\002\001\001" +
    "\000\004\026\u014c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u014f\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\u0152\045\207\001\001\000\002\001" +
    "\001\000\004\026\u0157\001\001\000\002\001\001\000\004" +
    "\026\u0156\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0159\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\u015c\045\207\001\001\000\002\001\001\000" +
    "\004\026\u0161\001\001\000\002\001\001\000\004\026\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u0163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u0167\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        System.err.println("\n ERROR DE SINTAXIS:");
        System.err.println("   Linea: " + (s.left+1));
        System.err.println("   Token inesperado: " + s.value);
    }
    
    public void report_error(String message, Object info) {
        System.err.println("ERROR: " + message);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.err.println("\nERROR FATAL: No se puede recuperar del error de sintaxis");
        throw new Exception("Error de sintaxis irrecuperable en linea " + (s.left+1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // unary_negative ::= minus_operator int_literal 
            {
              Object RESULT =null;
		 System.out.println("Negativo entero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_negative",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // unary_negative ::= minus_operator float_literal 
            {
              Object RESULT =null;
		 System.out.println("Negativo flotante"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_negative",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // postfix_expression ::= identifier increment_operator 
            {
              Object RESULT =null;
		 System.out.println("Incremento (++)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // postfix_expression ::= identifier decrement_operator 
            {
              Object RESULT =null;
		 System.out.println("Decremento (--)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // arithmetic_expression ::= arithmetic_expression plus_operator term 
            {
              Object RESULT =null;
		 System.out.println("Suma (+)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // arithmetic_expression ::= arithmetic_expression plus_operator error 
            {
              Object RESULT =null;
		 System.err.println("Error:En la expresión aritmética después de +"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arithmetic_expression ::= arithmetic_expression minus_operator term 
            {
              Object RESULT =null;
		 System.out.println("Resta (-)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arithmetic_expression ::= arithmetic_expression minus_operator error 
            {
              Object RESULT =null;
		 System.err.println("Error:En la expresión aritmética después de -"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arithmetic_expression ::= term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= term multiplication_operator power 
            {
              Object RESULT =null;
		 System.out.println("Multiplicacion (*)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= term division_operator power 
            {
              Object RESULT =null;
		 System.out.println("Division (/)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= term int_division_operator power 
            {
              Object RESULT =null;
		 System.out.println("Division entera (//)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= term modulo_operator power 
            {
              Object RESULT =null;
		 System.out.println("Modulo (%)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= power 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // power ::= factor power_operator power 
            {
              Object RESULT =null;
		 System.out.println("Potencia (^)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // power ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // factor ::= left_parenthesis arithmetic_expression right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Expresion entre parentesis reconocida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= arithmetic_operands 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arithmetic_operands ::= int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arithmetic_operands ::= float_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arithmetic_operands ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithmetic_operands ::= unary_negative 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arithmetic_operands ::= postfix_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arithmetic_operands ::= array_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arithmetic_operands ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arithmetic_operands ::= bool_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logical_expresion_and ::= logical_expresion_and and_operator logical_expresion_or 
            {
              Object RESULT =null;
		 System.out.println("Operador logico AND (@)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_and",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical_expresion_and ::= logical_expresion_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_and",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logical_expresion_or ::= logical_expresion_or or_operator relational_expression 
            {
              Object RESULT =null;
		 System.out.println("Operador logico OR (~)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_or",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logical_expresion_or ::= relational_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_or",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // relational_expression ::= relational_expression greater_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor que (>) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // relational_expression ::= relational_expression less_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Menor que (<) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // relational_expression ::= relational_expression greater_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor o igual que (>=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relational_expression ::= relational_expression less_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Menor o igual que (<=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relational_expression ::= relational_expression equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Igual que (==) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relational_expression ::= relational_expression not_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Diferente que (!=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relational_expression ::= arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresión aritmética"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaration_values ::= logical_expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration_values ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaration_values ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaration ::= let_keyword int_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: int sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration ::= let_keyword float_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: float sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration ::= let_keyword bool_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: bool sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration ::= let_keyword char_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: char sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration ::= let_keyword string_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: string sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= let_keyword int_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: int con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration ::= let_keyword float_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: float con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration ::= let_keyword bool_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: bool con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaration ::= let_keyword char_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: char con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaration ::= let_keyword string_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: string con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaration ::= error delimiter 
            {
              Object RESULT =null;
		
               System.err.println("DECLARACION con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // reassignment ::= identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Reasignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // reassignment ::= identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Reasignación con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array int sin nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // array_declaration ::= let_keyword int_keyword identifier error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array char sin nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // array_declaration ::= let_keyword char_keyword identifier error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array int con valores"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block assignment_operator left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: arreglo char con valores"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block assignment_operator left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // array_literals ::= int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // array_literals ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // array_literals ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // array_literals ::= array_literals comma_keyword int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // array_literals ::= array_literals comma_keyword CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // array_literals ::= array_literals comma_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assign_elements_array ::= identifier left_block int_literal right_block assignment_operator arithmetic_expression delimiter 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a elemento de arreglo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_elements_array",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assign_elements_array ::= identifier left_block int_literal right_block assignment_operator CHAR_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a elemento de arreglo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_elements_array",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // array_access ::= identifier left_block int_literal right_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // input_statement ::= input_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Input reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // input_statement ::= input_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en input"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // output_statement ::= output_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // output_statement ::= output_keyword int_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output entero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // output_statement ::= output_keyword float_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // output_statement ::= output_keyword bool_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output booleano"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // output_statement ::= output_keyword CHAR_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // output_statement ::= output_keyword STRING_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // output_statement ::= output_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en output"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // decide_of ::= decide_of_keyword left_parenthesis logical_expresion_and right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("decide of normal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // decide_of ::= decide_of_keyword left_parenthesis logical_expresion_and right_parenthesis block elif_list 
            {
              Object RESULT =null;
		 System.out.println("decide of con elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // decide_of ::= decide_of_keyword left_parenthesis logical_expresion_and right_parenthesis block else_part 
            {
              Object RESULT =null;
		 System.out.println("decide of con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // decide_of ::= decide_of_keyword left_parenthesis logical_expresion_and right_parenthesis block elif_list else_part 
            {
              Object RESULT =null;
		 System.out.println("decide of con elif y else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // decide_of ::= decide_of_keyword left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("Error en condicion de decide of"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // elif_list ::= elif_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // elif_list ::= elif_list elif_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // elif_part ::= elseif_keyword left_parenthesis logical_expresion_and right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // else_part ::= else_keyword block 
            {
              Object RESULT =null;
		 System.out.println("else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // loop ::= loop_keyword loop_content exit_when_keyword logical_expresion_and delimiter end_loop_$_keyword 
            {
              Object RESULT =null;
		 System.out.println("Loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // loop ::= loop_keyword error end_loop_$_keyword 
            {
              Object RESULT =null;
		 System.err.println("Error en contenido de loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // loop_content ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // loop_content ::= break_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // loop_content ::= loop_content statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // loop_content ::= loop_content break_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // break_statement ::= break_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("break"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_loop ::= for_keyword left_parenthesis declaration step_keyword int_literal to_keyword int_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop int to"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_loop ::= for_keyword left_parenthesis declaration step_keyword int_literal downto_keyword int_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop int downto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for_loop ::= for_keyword left_parenthesis declaration step_keyword float_literal to_keyword float_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop float to"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_loop ::= for_keyword left_parenthesis declaration step_keyword float_literal downto_keyword float_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop float downto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for_loop ::= for_keyword left_parenthesis error right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 
          System.err.println("Error en condicion de for")
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // function ::= int_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion int sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // function ::= int_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion int con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // function ::= int_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // function ::= float_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion float sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // function ::= float_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion float con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // function ::= float_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // function ::= bool_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion bool sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // function ::= bool_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion bool con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // function ::= bool_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // function ::= char_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion char sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // function ::= char_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion char con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // function ::= char_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // function ::= string_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion string sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // function ::= string_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion string con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // function ::= string_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // params ::= param params_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // params_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_tail",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // params_tail ::= comma_keyword param params_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_tail",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // param ::= int_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // param ::= float_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // param ::= bool_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // param ::= char_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // param ::= string_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // return_statement ::= return_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("return vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // return_statement ::= return_keyword logical_expresion_and delimiter 
            {
              Object RESULT =null;
		 System.out.println("return expresion logica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // function_call ::= identifier left_parenthesis right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Llamada a funcion sin argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // function_call ::= identifier left_parenthesis args right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Llamada a funcion con argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // args ::= int_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // args ::= float_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // args ::= identifier args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // args ::= array_access args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // args_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // args_tail ::= comma_keyword int_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // args_tail ::= comma_keyword float_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // args_tail ::= comma_keyword identifier args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // args_tail ::= comma_keyword array_access args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // block ::= left_block statements right_block 
            {
              Object RESULT =null;
		 System.out.println("bloque con statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // block ::= left_block right_block 
            {
              Object RESULT =null;
		 System.out.println("bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // block ::= left_block error right_block 
            {
              Object RESULT =null;
		 System.err.println("bloque con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // statement ::= reassignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // statement ::= array_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // statement ::= assign_elements_array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statement ::= input_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // statement ::= output_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement ::= decide_of 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // statement ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // global_variables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // global_variables ::= global_variables declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // principal ::= void_keyword principal_keyword left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("\n>> FUNCION PRINCIPAL reconocida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // functions ::= functions function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // program ::= global_variables principal functions 
            {
              Object RESULT =null;
		 System.out.println("\n========== PROGRAMA COMPLETO VALIDADO ==========\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
